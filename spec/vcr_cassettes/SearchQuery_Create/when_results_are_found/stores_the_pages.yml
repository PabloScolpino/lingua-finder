---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=test%20string&start=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:28:46 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogImN1c3RvbXNlYXJjaCNzZWFyY2giLAogICJ1cmwiOiB7CiAgICAidHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICJ0ZW1wbGF0ZSI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9jdXN0b21zZWFyY2gvdjE/cT17c2VhcmNoVGVybXN9Jm51bT17Y291bnQ/fSZzdGFydD17c3RhcnRJbmRleD99JmxyPXtsYW5ndWFnZT99JnNhZmU9e3NhZmU/fSZjeD17Y3g/fSZzb3J0PXtzb3J0P30mZmlsdGVyPXtmaWx0ZXI/fSZnbD17Z2w/fSZjcj17Y3I/fSZnb29nbGVob3N0PXtnb29nbGVIb3N0P30mYzJjb2ZmPXtkaXNhYmxlQ25Ud1RyYW5zbGF0aW9uP30maHE9e2hxP30maGw9e2hsP30mc2l0ZVNlYXJjaD17c2l0ZVNlYXJjaD99JnNpdGVTZWFyY2hGaWx0ZXI9e3NpdGVTZWFyY2hGaWx0ZXI/fSZleGFjdFRlcm1zPXtleGFjdFRlcm1zP30mZXhjbHVkZVRlcm1zPXtleGNsdWRlVGVybXM/fSZsaW5rU2l0ZT17bGlua1NpdGU/fSZvclRlcm1zPXtvclRlcm1zP30mcmVsYXRlZFNpdGU9e3JlbGF0ZWRTaXRlP30mZGF0ZVJlc3RyaWN0PXtkYXRlUmVzdHJpY3Q/fSZsb3dSYW5nZT17bG93UmFuZ2U/fSZoaWdoUmFuZ2U9e2hpZ2hSYW5nZT99JnNlYXJjaFR5cGU9e3NlYXJjaFR5cGV9JmZpbGVUeXBlPXtmaWxlVHlwZT99JnJpZ2h0cz17cmlnaHRzP30maW1nU2l6ZT17aW1nU2l6ZT99JmltZ1R5cGU9e2ltZ1R5cGU/fSZpbWdDb2xvclR5cGU9e2ltZ0NvbG9yVHlwZT99JmltZ0RvbWluYW50Q29sb3I9e2ltZ0RvbWluYW50Q29sb3I/fSZhbHQ9anNvbiIKICB9LAogICJxdWVyaWVzIjogewogICAgInJlcXVlc3QiOiBbCiAgICAgIHsKICAgICAgICAidGl0bGUiOiAiR29vZ2xlIEN1c3RvbSBTZWFyY2ggLSB0ZXN0IHN0cmluZyIsCiAgICAgICAgInRvdGFsUmVzdWx0cyI6ICI3NDAwMDAwMDAiLAogICAgICAgICJzZWFyY2hUZXJtcyI6ICJ0ZXN0IHN0cmluZyIsCiAgICAgICAgImNvdW50IjogMTAsCiAgICAgICAgInN0YXJ0SW5kZXgiOiAxLAogICAgICAgICJpbnB1dEVuY29kaW5nIjogInV0ZjgiLAogICAgICAgICJvdXRwdXRFbmNvZGluZyI6ICJ1dGY4IiwKICAgICAgICAic2FmZSI6ICJvZmYiLAogICAgICAgICJjeCI6ICIwMDgzNDk1MTIwOTk2MTYwODcyNTc6Ml9hYTVmeDVmN2UiCiAgICAgIH0KICAgIF0sCiAgICAibmV4dFBhZ2UiOiBbCiAgICAgIHsKICAgICAgICAidGl0bGUiOiAiR29vZ2xlIEN1c3RvbSBTZWFyY2ggLSB0ZXN0IHN0cmluZyIsCiAgICAgICAgInRvdGFsUmVzdWx0cyI6ICI3NDAwMDAwMDAiLAogICAgICAgICJzZWFyY2hUZXJtcyI6ICJ0ZXN0IHN0cmluZyIsCiAgICAgICAgImNvdW50IjogMTAsCiAgICAgICAgInN0YXJ0SW5kZXgiOiAxMSwKICAgICAgICAiaW5wdXRFbmNvZGluZyI6ICJ1dGY4IiwKICAgICAgICAib3V0cHV0RW5jb2RpbmciOiAidXRmOCIsCiAgICAgICAgInNhZmUiOiAib2ZmIiwKICAgICAgICAiY3giOiAiMDA4MzQ5NTEyMDk5NjE2MDg3MjU3OjJfYWE1Zng1ZjdlIgogICAgICB9CiAgICBdCiAgfSwKICAiY29udGV4dCI6IHsKICAgICJ0aXRsZSI6ICJMaW5ndWFGaW5kZXIgfCBkZXZlbG9wbWVudCIKICB9LAogICJzZWFyY2hJbmZvcm1hdGlvbiI6IHsKICAgICJzZWFyY2hUaW1lIjogMC4xODE5NzQsCiAgICAiZm9ybWF0dGVkU2VhcmNoVGltZSI6ICIwLjE4IiwKICAgICJ0b3RhbFJlc3VsdHMiOiAiNzQwMDAwMDAwIiwKICAgICJmb3JtYXR0ZWRUb3RhbFJlc3VsdHMiOiAiNzQwLDAwMCwwMDAiCiAgfSwKICAiaXRlbXMiOiBbCiAgICB7CiAgICAgICJraW5kIjogImN1c3RvbXNlYXJjaCNyZXN1bHQiLAogICAgICAidGl0bGUiOiAiUmVnRXhwLnByb3RvdHlwZS50ZXN0KCkgLSBKYXZhU2NyaXB0IHwgTUROIiwKICAgICAgImh0bWxUaXRsZSI6ICJSZWdFeHAucHJvdG90eXBlLlx1MDAzY2JcdTAwM2V0ZXN0XHUwMDNjL2JcdTAwM2UoKSAtIEphdmFTY3JpcHQgfCBNRE4iLAogICAgICAibGluayI6ICJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9SZWdFeHAvdGVzdCIsCiAgICAgICJkaXNwbGF5TGluayI6ICJkZXZlbG9wZXIubW96aWxsYS5vcmciLAogICAgICAic25pcHBldCI6ICJNYXkgMTcsIDIwMjIgLi4uIFRoZSB0ZXN0KCkgbWV0aG9kIGV4ZWN1dGVzIGEgc2VhcmNoIGZvciBhIG1hdGNoIGJldHdlZW4gYSByZWd1bGFyIGV4cHJlc3Npb24gYW5kIGEgc3BlY2lmaWVkIHN0cmluZy4gUmV0dXJucyB0cnVlIG9yIGZhbHNlLiIsCiAgICAgICJodG1sU25pcHBldCI6ICJNYXkgMTcsIDIwMjIgXHUwMDNjYlx1MDAzZS4uLlx1MDAzYy9iXHUwMDNlIFRoZSBcdTAwM2NiXHUwMDNldGVzdFx1MDAzYy9iXHUwMDNlKCkgbWV0aG9kIGV4ZWN1dGVzIGEgc2VhcmNoIGZvciBhIG1hdGNoIGJldHdlZW4gYSByZWd1bGFyIGV4cHJlc3Npb24gYW5kIGEgc3BlY2lmaWVkIFx1MDAzY2JcdTAwM2VzdHJpbmdcdTAwM2MvYlx1MDAzZS4gUmV0dXJucyB0cnVlIG9yIGZhbHNlLiIsCiAgICAgICJjYWNoZUlkIjogIlJSanVwbTVsUFVjSiIsCiAgICAgICJmb3JtYXR0ZWRVcmwiOiAiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC8uLi4vR2xvYmFsLi4uL3Rlc3QiLAogICAgICAiaHRtbEZvcm1hdHRlZFVybCI6ICJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0Ly4uLi9HbG9iYWwuLi4vXHUwMDNjYlx1MDAzZXRlc3RcdTAwM2MvYlx1MDAzZSIsCiAgICAgICJwYWdlbWFwIjogewogICAgICAgICJjc2VfdGh1bWJuYWlsIjogWwogICAgICAgICAgewogICAgICAgICAgICAic3JjIjogImh0dHBzOi8vZW5jcnlwdGVkLXRibjIuZ3N0YXRpYy5jb20vaW1hZ2VzP3E9dGJuOkFOZDlHY1J6QVR5bmh4SjN4Q0t4YWh2eEJVVVdWSUREcjB4RFllOVJaMHpibkVBMHhSTlBHWXdhUFZFUU1LMCIsCiAgICAgICAgICAgICJ3aWR0aCI6ICIzMDAiLAogICAgICAgICAgICAiaGVpZ2h0IjogIjE2OCIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJCcmVhZGNydW1iTGlzdCI6IFsKICAgICAgICAgIHt9CiAgICAgICAgXSwKICAgICAgICAibWV0YXRhZ3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJvZzppbWFnZSI6ICJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9tZG4tc29jaWFsLXNoYXJlLmNkNmM0YTVhLnBuZyIsCiAgICAgICAgICAgICJ0aGVtZS1jb2xvciI6ICIjZmZmZmZmIiwKICAgICAgICAgICAgInR3aXR0ZXI6Y2FyZCI6ICJzdW1tYXJ5X2xhcmdlX2ltYWdlIiwKICAgICAgICAgICAgInZpZXdwb3J0IjogIndpZHRoPWRldmljZS13aWR0aCxpbml0aWFsLXNjYWxlPTEiLAogICAgICAgICAgICAib2c6dGl0bGUiOiAiUmVnRXhwLnByb3RvdHlwZS50ZXN0KCkgLSBKYXZhU2NyaXB0IHwgTUROIiwKICAgICAgICAgICAgIm9nOmxvY2FsZSI6ICJlbi1VUyIsCiAgICAgICAgICAgICJwb3NpdGlvbiI6ICIxIiwKICAgICAgICAgICAgIm9nOnVybCI6ICJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9SZWdFeHAvdGVzdCIsCiAgICAgICAgICAgICJvZzpkZXNjcmlwdGlvbiI6ICJUaGUgdGVzdCgpIG1ldGhvZCBleGVjdXRlcyBhIHNlYXJjaCBmb3IgYSBtYXRjaCBiZXR3ZWVuIGFcbiAgcmVndWxhciBleHByZXNzaW9uIGFuZCBhIHNwZWNpZmllZCBzdHJpbmcuIFJldHVybnMgdHJ1ZSBvclxuICBmYWxzZS4iCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiY3NlX2ltYWdlIjogWwogICAgICAgICAgewogICAgICAgICAgICAic3JjIjogImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL21kbi1zb2NpYWwtc2hhcmUuY2Q2YzRhNWEucG5nIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiY3VzdG9tc2VhcmNoI3Jlc3VsdCIsCiAgICAgICJ0aXRsZSI6ICJTdHJpbmcgdGVzdDogTWVkbGluZVBsdXMgTWVkaWNhbCBFbmN5Y2xvcGVkaWEiLAogICAgICAiaHRtbFRpdGxlIjogIlx1MDAzY2JcdTAwM2VTdHJpbmcgdGVzdFx1MDAzYy9iXHUwMDNlOiBNZWRsaW5lUGx1cyBNZWRpY2FsIEVuY3ljbG9wZWRpYSIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vbWVkbGluZXBsdXMuZ292L2VuY3kvYXJ0aWNsZS8wMDM3MzUuaHRtIiwKICAgICAgImRpc3BsYXlMaW5rIjogIm1lZGxpbmVwbHVzLmdvdiIsCiAgICAgICJzbmlwcGV0IjogIkFwciAxMCwgMjAyMCAuLi4gQSBzdHJpbmcgdGVzdCBpbnZvbHZlcyBzd2FsbG93aW5nIGEgc3RyaW5nIHRvIG9idGFpbiBhIHNhbXBsZSBmcm9tIHRoZSB1cHBlciBwYXJ0IG9mIHRoZSBzbWFsbCBpbnRlc3RpbmUuIFRoZSBzYW1wbGUgaXMgdGhlbiB0ZXN0ZWQgdG8gbG9va8KgLi4uIiwKICAgICAgImh0bWxTbmlwcGV0IjogIkFwciAxMCwgMjAyMCBcdTAwM2NiXHUwMDNlLi4uXHUwMDNjL2JcdTAwM2UgQSBcdTAwM2NiXHUwMDNlc3RyaW5nIHRlc3RcdTAwM2MvYlx1MDAzZSBpbnZvbHZlcyBzd2FsbG93aW5nIGEgXHUwMDNjYlx1MDAzZXN0cmluZ1x1MDAzYy9iXHUwMDNlIHRvIG9idGFpbiBhIHNhbXBsZSBmcm9tIHRoZSB1cHBlciBwYXJ0IG9mIHRoZSBzbWFsbCBpbnRlc3RpbmUuIFRoZSBzYW1wbGUgaXMgdGhlbiB0ZXN0ZWQgdG8gbG9vayZuYnNwOy4uLiIsCiAgICAgICJjYWNoZUlkIjogIklkVmlVMXpNaTM4SiIsCiAgICAgICJmb3JtYXR0ZWRVcmwiOiAiaHR0cHM6Ly9tZWRsaW5lcGx1cy5nb3YvZW5jeS9hcnRpY2xlLzAwMzczNS5odG0iLAogICAgICAiaHRtbEZvcm1hdHRlZFVybCI6ICJodHRwczovL21lZGxpbmVwbHVzLmdvdi9lbmN5L2FydGljbGUvMDAzNzM1Lmh0bSIsCiAgICAgICJwYWdlbWFwIjogewogICAgICAgICJjc2VfdGh1bWJuYWlsIjogWwogICAgICAgICAgewogICAgICAgICAgICAic3JjIjogImh0dHBzOi8vZW5jcnlwdGVkLXRibjIuZ3N0YXRpYy5jb20vaW1hZ2VzP3E9dGJuOkFOZDlHY1M3dmR0Q2xwaGhCbkFzQy1rWFl0d2ppNXJ4TGEtbWZxcjhnQUI1MlZxaURYaEE0MjVGWjlZM09vMCIsCiAgICAgICAgICAgICJ3aWR0aCI6ICIzMTAiLAogICAgICAgICAgICAiaGVpZ2h0IjogIjE2MyIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJtZXRhdGFncyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImFjLWRpY3Rpb25hcnkiOiAibWVkbGluZXBsdXMtYWMtZGljdGlvbmFyeSIsCiAgICAgICAgICAgICJvZzppbWFnZSI6ICJodHRwczovL21lZGxpbmVwbHVzLmdvdi9pbWFnZXMvc2hhcmVfZW5jeV8xLmpwZyIsCiAgICAgICAgICAgICJmYjphcHBfaWQiOiAiMTA0MjI0NTYyNTgyMTQ0OCIsCiAgICAgICAgICAgICJleHBpcmVzIjogIlRodSwgMDQgMDggMjAyMiIsCiAgICAgICAgICAgICJ0d2l0dGVyOnRpdGxlIjogIlN0cmluZyB0ZXN0OiBNZWRsaW5lUGx1cyBNZWRpY2FsIEVuY3ljbG9wZWRpYSIsCiAgICAgICAgICAgICJ0d2l0dGVyOmNhcmQiOiAic3VtbWFyeV9sYXJnZV9pbWFnZSIsCiAgICAgICAgICAgICJ2aWV3cG9ydCI6ICJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSIsCiAgICAgICAgICAgICJ0d2l0dGVyOmRlc2NyaXB0aW9uIjogIkEgc3RyaW5nIHRlc3QgaW52b2x2ZXMgc3dhbGxvd2luZyBhIHN0cmluZyB0byBvYnRhaW4gYSBzYW1wbGUgZnJvbSB0aGUgdXBwZXIgcGFydCBvZiB0aGUgc21hbGwgaW50ZXN0aW5lLiBUaGUgc2FtcGxlIGlzIHRoZW4gdGVzdGVkIHRvIGxvb2sgZm9yIGludGVzdGluYWwgcGFyYXNpdGVzLiIsCiAgICAgICAgICAgICJvZzp0aXRsZSI6ICJTdHJpbmcgdGVzdDogTWVkbGluZVBsdXMgTWVkaWNhbCBFbmN5Y2xvcGVkaWEiLAogICAgICAgICAgICAib2c6dXJsIjogImh0dHBzOi8vbWVkbGluZXBsdXMuZ292L2VuY3kvYXJ0aWNsZS8wMDM3MzUuaHRtIiwKICAgICAgICAgICAgIm9nOmRlc2NyaXB0aW9uIjogIkEgc3RyaW5nIHRlc3QgaW52b2x2ZXMgc3dhbGxvd2luZyBhIHN0cmluZyB0byBvYnRhaW4gYSBzYW1wbGUgZnJvbSB0aGUgdXBwZXIgcGFydCBvZiB0aGUgc21hbGwgaW50ZXN0aW5lLiBUaGUgc2FtcGxlIGlzIHRoZW4gdGVzdGVkIHRvIGxvb2sgZm9yIGludGVzdGluYWwgcGFyYXNpdGVzLiIsCiAgICAgICAgICAgICJ0d2l0dGVyOmltYWdlIjogImh0dHBzOi8vbWVkbGluZXBsdXMuZ292L2ltYWdlcy9zaGFyZV9lbmN5XzEuanBnIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImNzZV9pbWFnZSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL21lZGxpbmVwbHVzLmdvdi9pbWFnZXMvc2hhcmVfZW5jeV8xLmpwZyIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJtZWRpY2Fsd2VicGFnZSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImF1ZGllbmNlIjogImh0dHA6Ly9zY2hlbWEub3JnL1BhdGllbnQiLAogICAgICAgICAgICAibmFtZSI6ICJTdHJpbmcgdGVzdCIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIHN0cmluZyB0ZXN0IGludm9sdmVzIHN3YWxsb3dpbmcgYSBzdHJpbmcgdG8gb2J0YWluIGEgc2FtcGxlIGZyb20gdGhlIHVwcGVyIHBhcnQgb2YgdGhlIHNtYWxsIGludGVzdGluZS4gVGhlIHNhbXBsZSBpcyB0aGVuIHRlc3RlZCB0byBsb29rIGZvciBpbnRlc3RpbmFsIHBhcmFzaXRlcy4iLAogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vbWVkbGluZXBsdXMuZ292L2VuY3kvYXJ0aWNsZS8wMDM3MzUuaHRtIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImxpc3RpdGVtIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaXRlbSI6ICJIb21lIiwKICAgICAgICAgICAgIm5hbWUiOiAiSG9tZSIsCiAgICAgICAgICAgICJwb3NpdGlvbiI6ICIxIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIml0ZW0iOiAiTWVkaWNhbCBFbmN5Y2xvcGVkaWEiLAogICAgICAgICAgICAibmFtZSI6ICJNZWRpY2FsIEVuY3ljbG9wZWRpYSIsCiAgICAgICAgICAgICJwb3NpdGlvbiI6ICIyIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiY3VzdG9tc2VhcmNoI3Jlc3VsdCIsCiAgICAgICJ0aXRsZSI6ICJKYXZhU2NyaXB0IFJlZ0V4cCB0ZXN0KCkgTWV0aG9kIiwKICAgICAgImh0bWxUaXRsZSI6ICJKYXZhU2NyaXB0IFJlZ0V4cCBcdTAwM2NiXHUwMDNldGVzdFx1MDAzYy9iXHUwMDNlKCkgTWV0aG9kIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9qc3JlZi9qc3JlZl9yZWdleHBfdGVzdC5hc3AiLAogICAgICAiZGlzcGxheUxpbmsiOiAid3d3Lnczc2Nob29scy5jb20iLAogICAgICAic25pcHBldCI6ICJFeGFtcGxlLiBTZWFyY2ggYSBzdHJpbmcgZm9yIHRoZSBjaGFyYWN0ZXIgXCJlXCI6IGxldCB0ZXh0ID0gXCJUaGUgYmVzdCB0aGluZ3MgaW4gbGlmZSBhcmUgZnJlZVwiOyBsZXQgcGF0dGVybiA9IC9lLzsgbGV0IHJlc3VsdCA9IHBhdHRlcm4udGVzdCh0ZXh0KTsuIiwKICAgICAgImh0bWxTbmlwcGV0IjogIkV4YW1wbGUuIFNlYXJjaCBhIFx1MDAzY2JcdTAwM2VzdHJpbmdcdTAwM2MvYlx1MDAzZSBmb3IgdGhlIGNoYXJhY3RlciAmcXVvdDtlJnF1b3Q7OiBsZXQgdGV4dCA9ICZxdW90O1RoZSBiZXN0IHRoaW5ncyBpbiBsaWZlIGFyZSBmcmVlJnF1b3Q7OyBsZXQgcGF0dGVybiA9IC9lLzsgbGV0IHJlc3VsdCA9IHBhdHRlcm4uXHUwMDNjYlx1MDAzZXRlc3RcdTAwM2MvYlx1MDAzZSh0ZXh0KTsuIiwKICAgICAgImNhY2hlSWQiOiAiVlI4bmlGS3lURjhKIiwKICAgICAgImZvcm1hdHRlZFVybCI6ICJodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2pzcmVmL2pzcmVmX3JlZ2V4cF90ZXN0LmFzcCIsCiAgICAgICJodG1sRm9ybWF0dGVkVXJsIjogImh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vanNyZWYvanNyZWZfcmVnZXhwX1x1MDAzY2JcdTAwM2V0ZXN0XHUwMDNjL2JcdTAwM2UuYXNwIiwKICAgICAgInBhZ2VtYXAiOiB7CiAgICAgICAgIm1ldGF0YWdzIjogWwogICAgICAgICAgewogICAgICAgICAgICAib2c6aW1hZ2UiOiAiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9pbWFnZXMvdzNzY2hvb2xzX2xvZ29fNDM2XzIucG5nIiwKICAgICAgICAgICAgIm9nOmltYWdlOndpZHRoIjogIjQzNiIsCiAgICAgICAgICAgICJ2aWV3cG9ydCI6ICJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSIsCiAgICAgICAgICAgICJvZzppbWFnZTpoZWlnaHQiOiAiMjI4IiwKICAgICAgICAgICAgIm9nOmltYWdlOnR5cGUiOiAiaW1hZ2UvcG5nIiwKICAgICAgICAgICAgIm9nOmRlc2NyaXB0aW9uIjogIlczU2Nob29scyBvZmZlcnMgZnJlZSBvbmxpbmUgdHV0b3JpYWxzLCByZWZlcmVuY2VzIGFuZCBleGVyY2lzZXMgaW4gYWxsIHRoZSBtYWpvciBsYW5ndWFnZXMgb2YgdGhlIHdlYi4gQ292ZXJpbmcgcG9wdWxhciBzdWJqZWN0cyBsaWtlIEhUTUwsIENTUywgSmF2YVNjcmlwdCwgUHl0aG9uLCBTUUwsIEphdmEsIGFuZCBtYW55LCBtYW55IG1vcmUuIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImNzZV9pbWFnZSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2ltYWdlcy93M3NjaG9vbHNfbG9nb180MzZfMi5wbmciCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgICAgInRpdGxlIjogImphdmFzY3JpcHQgLSBDaGVjayB3aGV0aGVyIGEgc3RyaW5nIG1hdGNoZXMgYSByZWdleCBpbiBKUyAtIFN0YWNrIC4uLiIsCiAgICAgICJodG1sVGl0bGUiOiAiamF2YXNjcmlwdCAtIENoZWNrIHdoZXRoZXIgYSBcdTAwM2NiXHUwMDNlc3RyaW5nXHUwMDNjL2JcdTAwM2UgbWF0Y2hlcyBhIHJlZ2V4IGluIEpTIC0gU3RhY2sgLi4uIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjYwMzAxNS9jaGVjay13aGV0aGVyLWEtc3RyaW5nLW1hdGNoZXMtYS1yZWdleC1pbi1qcyIsCiAgICAgICJkaXNwbGF5TGluayI6ICJzdGFja292ZXJmbG93LmNvbSIsCiAgICAgICJzbmlwcGV0IjogIm1hdGNoKCkgd29ya3Mgb25seSB3aXRoIHN0cmluZ3MsIGJ1dCB0ZXN0KCkgd29ya3MgYWxzbyB3aXRoIGludGVnZXJzLiAxMjM0NS5tYXRjaCgvXihbYS16MC05XXs1LH0pJC8pOyAvL8KgLi4uIiwKICAgICAgImh0bWxTbmlwcGV0IjogIm1hdGNoKCkgd29ya3Mgb25seSB3aXRoIFx1MDAzY2JcdTAwM2VzdHJpbmdzXHUwMDNjL2JcdTAwM2UsIGJ1dCBcdTAwM2NiXHUwMDNldGVzdFx1MDAzYy9iXHUwMDNlKCkgd29ya3MgYWxzbyB3aXRoIGludGVnZXJzLiAxMjM0NS5tYXRjaCgvXihbYS16MC05XXs1LH0pJC8pOyAvLyZuYnNwOy4uLiIsCiAgICAgICJjYWNoZUlkIjogIlA4dS1VOVRTTlowSiIsCiAgICAgICJmb3JtYXR0ZWRVcmwiOiAiaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS8uLi4vY2hlY2std2hldGhlci1hLXN0cmluZy1tYXRjaGVzLWEtcmVnZXgtaW4tanMiLAogICAgICAiaHRtbEZvcm1hdHRlZFVybCI6ICJodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tLy4uLi9jaGVjay13aGV0aGVyLWEtXHUwMDNjYlx1MDAzZXN0cmluZ1x1MDAzYy9iXHUwMDNlLW1hdGNoZXMtYS1yZWdleC1pbi1qcyIsCiAgICAgICJwYWdlbWFwIjogewogICAgICAgICJjc2VfdGh1bWJuYWlsIjogWwogICAgICAgICAgewogICAgICAgICAgICAic3JjIjogImh0dHBzOi8vZW5jcnlwdGVkLXRibjIuZ3N0YXRpYy5jb20vaW1hZ2VzP3E9dGJuOkFOZDlHY1FZbDd6dVQzY3dfQkJSQXloZFFFYlF1QmdxZE5IWEtISVlLTDhTOGx5OHg5TF9YQTlzZHdTbWlIcyIsCiAgICAgICAgICAgICJ3aWR0aCI6ICIyMjUiLAogICAgICAgICAgICAiaGVpZ2h0IjogIjIyNSIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJxYXBhZ2UiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJpbWFnZSI6ICJodHRwczovL2Nkbi5zc3RhdGljLm5ldC9TaXRlcy9zdGFja292ZXJmbG93L0ltZy9hcHBsZS10b3VjaC1pY29uQDIucG5nP3Y9NzNkNzlhODliZGVkIiwKICAgICAgICAgICAgInByaW1hcnlpbWFnZW9mcGFnZSI6ICJodHRwczovL2Nkbi5zc3RhdGljLm5ldC9TaXRlcy9zdGFja292ZXJmbG93L0ltZy9hcHBsZS10b3VjaC1pY29uQDIucG5nP3Y9NzNkNzlhODliZGVkIiwKICAgICAgICAgICAgIm5hbWUiOiAiQ2hlY2sgd2hldGhlciBhIHN0cmluZyBtYXRjaGVzIGEgcmVnZXggaW4gSlMiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSSB3YW50IHRvIHVzZSBKYXZhU2NyaXB0IChjYW4gYmUgd2l0aCBqUXVlcnkpIHRvIGRvIHNvbWUgY2xpZW50LXNpZGUgdmFsaWRhdGlvbiB0byBjaGVjayB3aGV0aGVyIGEgc3RyaW5nIG1hdGNoZXMgdGhlIHJlZ2V4OiBeKFthLXowLTldezUsfSkkIElkZWFsbHkgaXQgd291bGQgYmUgYW4gZXhwcmVzc2lvbiB0aGF0IHJldHVybmVkIHRydWUgb3IiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicXVlc3Rpb24iOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJpbWFnZSI6ICJodHRwczovL2Nkbi5zc3RhdGljLm5ldC9TaXRlcy9zdGFja292ZXJmbG93L0ltZy9hcHBsZS10b3VjaC1pY29uLnBuZz92PWM3OGJkNDU3NTc1YSIsCiAgICAgICAgICAgICJ1cHZvdGVjb3VudCI6ICIxMDAzIiwKICAgICAgICAgICAgImNvbW1lbnRjb3VudCI6ICIyIiwKICAgICAgICAgICAgImFuc3dlcmNvdW50IjogIjEzIiwKICAgICAgICAgICAgIm5hbWUiOiAiQ2hlY2sgd2hldGhlciBhIHN0cmluZyBtYXRjaGVzIGEgcmVnZXggaW4gSlMiLAogICAgICAgICAgICAiZGF0ZWNyZWF0ZWQiOiAiMjAxMS0wNy0wNlQyMTowODo1MCIsCiAgICAgICAgICAgICJ0ZXh0IjogIkkgd2FudCB0byB1c2UgSmF2YVNjcmlwdCAoY2FuIGJlIHdpdGggalF1ZXJ5KSB0byBkbyBzb21lIGNsaWVudC1zaWRlIHZhbGlkYXRpb24gdG8gY2hlY2sgd2hldGhlciBhIHN0cmluZyBtYXRjaGVzIHRoZSByZWdleDogXihbYS16MC05XXs1LH0pJCBJZGVhbGx5IGl0IHdvdWxkIGJlIGFuIGV4cHJlc3Npb24gdGhhdCByZXR1cm5lZC4uLiIsCiAgICAgICAgICAgICJ1cmwiOiAiU2hhcmUiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiYW5zd2VyIjogWwogICAgICAgICAgewogICAgICAgICAgICAidXB2b3RlY291bnQiOiAiMTU2NiIsCiAgICAgICAgICAgICJjb21tZW50Y291bnQiOiAiNiIsCiAgICAgICAgICAgICJ0ZXh0IjogIlVzZSByZWdleC50ZXN0KCkgaWYgYWxsIHlvdSB3YW50IGlzIGEgYm9vbGVhbiByZXN1bHQ6IGNvbnNvbGUubG9nKC9eKFthLXowLTldezUsfSkkLy50ZXN0KCdhYmMxJykpOyAvLyBmYWxzZSBjb25zb2xlLmxvZygvXihbYS16MC05XXs1LH0pJC8udGVzdCgnYWJjMTInKSk7IC8vIHRydWUgY29uc29sZS5sb2coL14oW2EtejAtOV17NSx9KSQvLnRlLi4uIiwKICAgICAgICAgICAgImRhdGVjcmVhdGVkIjogIjIwMTEtMDctMDZUMjE6MTA6MjgiLAogICAgICAgICAgICAidXJsIjogIlNoYXJlIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInVwdm90ZWNvdW50IjogIjIzNCIsCiAgICAgICAgICAgICJjb21tZW50Y291bnQiOiAiMiIsCiAgICAgICAgICAgICJ0ZXh0IjogIlVzZSB0ZXN0KCkgbWV0aG9kIDogdmFyIHRlcm0gPSBcInNhbXBsZTFcIjsgdmFyIHJlID0gbmV3IFJlZ0V4cChcIl4oW2EtejAtOV17NSx9KSRcIik7IGlmIChyZS50ZXN0KHRlcm0pKSB7IGNvbnNvbGUubG9nKFwiVmFsaWRcIik7IH0gZWxzZSB7IGNvbnNvbGUubG9nKFwiSW52YWxpZFwiKTsgfSIsCiAgICAgICAgICAgICJkYXRlY3JlYXRlZCI6ICIyMDE1LTAyLTE2VDA2OjI1OjIyIiwKICAgICAgICAgICAgInVybCI6ICJTaGFyZSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ1cHZvdGVjb3VudCI6ICIxMjgiLAogICAgICAgICAgICAiY29tbWVudGNvdW50IjogIjQiLAogICAgICAgICAgICAidGV4dCI6ICJZb3UgY2FuIHVzZSBtYXRjaCgpIGFzIHdlbGw6IGlmIChzdHIubWF0Y2goL14oW2EtejAtOV17NSx9KSQvKSkgeyBhbGVydChcIm1hdGNoIVwiKTsgfSBCdXQgdGVzdCgpIHNlZW1zIHRvIGJlIGZhc3RlciBhcyB5b3UgY2FuIHJlYWQgaGVyZS4gSW1wb3J0YW50IGRpZmZlcmVuY2UgYmV0d2VlbiBtYXRjaCgpIGFuZCB0ZXN0KCk6IG1hdGNoKCkuLi4iLAogICAgICAgICAgICAiZGF0ZWNyZWF0ZWQiOiAiMjAxNC0wNi0xOVQxNTowMTozNSIsCiAgICAgICAgICAgICJ1cmwiOiAiU2hhcmUiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAidXB2b3RlY291bnQiOiAiNjEiLAogICAgICAgICAgICAidGV4dCI6ICJVc2UgL3lvdXJlZ2V4cC8udGVzdCh5b3VyU3RyaW5nKSBpZiB5b3Ugb25seSB3YW50IHRvIGtub3cgd2hldGhlciB5b3VyIHN0cmluZyBtYXRjaGVzIHRoZSByZWdleHAuIiwKICAgICAgICAgICAgImRhdGVjcmVhdGVkIjogIjIwMTEtMDctMDZUMjE6MTE6MTEiLAogICAgICAgICAgICAidXJsIjogIlNoYXJlIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInVwdm90ZWNvdW50IjogIjE3IiwKICAgICAgICAgICAgInRleHQiOiAibGV0IHN0ciA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWic7IGxldCByZWdleHAgPSAvW2EtZF0vZ2k7IGNvbnNvbGUubG9nKHN0ci5tYXRjaChyZWdleHApKTsgUnVuIGNvZGUgc25pcHBldEhpZGUgcmVzdWx0c0V4cGFuZCBzbmlwcGV0IiwKICAgICAgICAgICAgImRhdGVjcmVhdGVkIjogIjIwMTgtMDMtMTlUMDQ6MTE6MzQiLAogICAgICAgICAgICAidXJsIjogIlNoYXJlIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInVwdm90ZWNvdW50IjogIjE3IiwKICAgICAgICAgICAgInRleHQiOiAiSGVyZSdzIGFuIGV4YW1wbGUgdGhhdCBsb29rcyBmb3IgY2VydGFpbiBIVE1MIHRhZ3Mgc28gaXQncyBjbGVhciB0aGF0IC9zb21lcmVnZXgvLnRlc3QoKSByZXR1cm5zIGEgYm9vbGVhbjogaWYoLyhzcGFufGhbMC02XXxsaXxhKS9pLnRlc3QoXCJoM1wiKSkgYWxlcnQoJ3RydWUnKTsgUnVuIGNvZGUgc25pcHBldEhpZGUgcmVzdWx0c0V4cGFuZC4uLiIsCiAgICAgICAgICAgICJkYXRlY3JlYXRlZCI6ICIyMDEzLTA5LTIzVDE1OjM1OjM4IiwKICAgICAgICAgICAgInVybCI6ICJTaGFyZSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ1cHZvdGVjb3VudCI6ICIxMCIsCiAgICAgICAgICAgICJjb21tZW50Y291bnQiOiAiMCIsCiAgICAgICAgICAgICJ0ZXh0IjogImNvbnN0IHJlZ0V4cFN0ciA9IFwiXihbYS16MC05XXs1LH0pJFwiIGNvbnN0IHJlc3VsdCA9IG5ldyBSZWdFeHAocmVnRXhwU3RyLCAnZycpLnRlc3QoXCJZb3VyIHN0cmluZ1wiKSAvLyBoZXJlIEkgaGF2ZSB1c2VkICdnJyB3aGljaCBtZWFucyBnbG9iYWwgc2VhcmNoIGNvbnNvbGUubG9nKHJlc3VsdCkgLy8gdHJ1ZSBpZiBpdCBtYXRjaGVkLC4uLiIsCiAgICAgICAgICAgICJkYXRlY3JlYXRlZCI6ICIyMDIwLTA0LTMwVDA2OjQwOjUwIiwKICAgICAgICAgICAgInVybCI6ICJTaGFyZSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ1cHZvdGVjb3VudCI6ICI1IiwKICAgICAgICAgICAgImNvbW1lbnRjb3VudCI6ICIyIiwKICAgICAgICAgICAgInRleHQiOiAidHJ5IC9eW2EtelxcZF17NSx9JC8udGVzdChzdHIpIFNob3cgY29kZSBzbmlwcGV0IGNvbnNvbGUubG9nKCAvXlthLXpcXGRdezUsfSQvLnRlc3QoXCJhYmMxMjNcIikgKTsgY29uc29sZS5sb2coIC9eW2EtelxcZF17NSx9JC8udGVzdChcImFiMTJcIikgKTsgUnVuIGNvZGUgc25pcHBldEhpZGUgcmVzdWx0c0V4cGFuZCBzbmlwcGV0IiwKICAgICAgICAgICAgImRhdGVjcmVhdGVkIjogIjIwMTktMDQtMTFUMjA6Mzc6NTEiLAogICAgICAgICAgICAidXJsIjogIlNoYXJlIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInVwdm90ZWNvdW50IjogIjUiLAogICAgICAgICAgICAidGV4dCI6ICJJIHdvdWxkIHJlY29tbWVuZCB1c2luZyB0aGUgZXhlY3V0ZSBtZXRob2Qgd2hpY2ggcmV0dXJucyBudWxsIGlmIG5vIG1hdGNoIGV4aXN0cyBvdGhlcndpc2UgaXQgcmV0dXJucyBhIGhlbHBmdWwgb2JqZWN0LiBsZXQgY2FzZTEgPSAvXihbYS16MC05XXs1LH0pJC8uZXhlYyhcImFiYzFcIik7IGNvbnNvbGUubG9nKGNhc2UxKTsgLy9udWxsLi4uIiwKICAgICAgICAgICAgImRhdGVjcmVhdGVkIjogIjIwMTktMDQtMjRUMjI6NDE6MDciLAogICAgICAgICAgICAidXJsIjogIlNoYXJlIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInVwdm90ZWNvdW50IjogIjUiLAogICAgICAgICAgICAidGV4dCI6ICJZb3UgY2FuIHRyeSB0aGlzLCBpdCB3b3JrcyBmb3IgbWUuIFx1MDAzY2lucHV0IHR5cGU9XCJ0ZXh0XCIgb25jaGFuZ2U9XCJDaGVja1ZhbGlkQW1vdW50KHRoaXMudmFsdWUpXCIgbmFtZT1cImFtb3VudFwiIHJlcXVpcmVkXHUwMDNlIFx1MDAzY3NjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCJcdTAwM2UgZnVuY3Rpb24gQ2hlY2tWYWxpZEFtb3VudChhbW91bnQpIHsgdmFyLi4uIiwKICAgICAgICAgICAgImRhdGVjcmVhdGVkIjogIjIwMjAtMDItMDdUMDY6NDI6MTEiLAogICAgICAgICAgICAidXJsIjogIlNoYXJlIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInVwdm90ZWNvdW50IjogIjMiLAogICAgICAgICAgICAidGV4dCI6ICJwbGVhc2UgdHJ5IHRoaXMgZmxvd2VyOiAvXlthLXowLTlcXF9cXC5cXC1dezIsMjB9XFxAW2EtejAtOVxcX1xcLV17MiwyMH1cXC5bYS16XXsyLDl9JC8udGVzdCgnYWJjQGFiYy5hYmMnKTsgdHJ1ZSIsCiAgICAgICAgICAgICJkYXRlY3JlYXRlZCI6ICIyMDE5LTAzLTE4VDE0OjUyOjUzIiwKICAgICAgICAgICAgInVybCI6ICJTaGFyZSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ1cHZvdGVjb3VudCI6ICIwIiwKICAgICAgICAgICAgInRleHQiOiAiSWYgeW91IGRvbid0IHdhbnQgXiBhbmQgJCBhcm91bmQgdGhlIHJlZ2V4IChJIGhhZCBzdWNoIGEgdXNlY2FzZSkgeW91IGNhbiBkbyBzb21ldGhpbmcgbGlrZSBsZXQgcmVnID0gL1thLXpBLVowLTldKy9nIGxldCB0eHQgPSBcImhlbGxvXCIgbGV0IG1hdGNoZXMgPSByZWcuZXhlYyh0eHQpWzBdID09IHR4dCBjb25zb2xlLmxvZyhgSXQuLi4iLAogICAgICAgICAgICAiZGF0ZWNyZWF0ZWQiOiAiMjAyMi0wNC0wN1QwMjoyNzoxNCIsCiAgICAgICAgICAgICJ1cmwiOiAiU2hhcmUiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAidXB2b3RlY291bnQiOiAiMCIsCiAgICAgICAgICAgICJ0ZXh0IjogIlVwZGF0ZS9BZGQgSWYgdGhlIHF1ZXJ5IHN0cmluZyBkb2VzIG5vdCBwcmVzZW50IGluIHRoZSBVUkwgdGhlbiB0aGUgYmVsb3cgc29sdXRpb24gd2lsbCB3b3JrIHRvIGFkZCB0aGUgcGFyYW0gaW4gdGhlIFVSTCwgaWYgaXQgYWxyZWFkeSBleGlzdHMgdGhlbiBpdCB3aWxsIHVwZGF0ZS4gZnVuY3Rpb24gdXBkYXRlVXJsUGFyYW1ldGVyKHVybCwuLi4iLAogICAgICAgICAgICAiZGF0ZWNyZWF0ZWQiOiAiMjAyMi0wNS0yOVQwNzoxNzo1NCIsCiAgICAgICAgICAgICJ1cmwiOiAiU2hhcmUiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGVyc29uIjogWwogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJSaWNoYXJkIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAidXNlcjExMzcxNiIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogIkFiaGlqZWV0IEthc3VyZGUiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJwbXJvdHVsZSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogInVzZXIyNzgwNjQiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJNaWtlIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAidXNlcjI0NDkyMzEiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJHZWV0YW5zaHUgR3VsYXRpIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiS2FtaWwgS2llxYJjemV3c2tpIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiSnVhbiBOYXZhcnJldGUiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJUb25naSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogIkphYmVyIEFsc2hhbWkiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJNYWRodXNvb2RhbiBQIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiU3VmaXlhbiBBbnNhcmkiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAibWV0YXRhZ3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJvZzppbWFnZSI6ICJodHRwczovL2Nkbi5zc3RhdGljLm5ldC9TaXRlcy9zdGFja292ZXJmbG93L0ltZy9hcHBsZS10b3VjaC1pY29uQDIucG5nP3Y9NzNkNzlhODliZGVkIiwKICAgICAgICAgICAgInR3aXR0ZXI6YXBwOnVybDppcGhvbmUiOiAic2UtemFwaG9kOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzY2MDMwMTUvY2hlY2std2hldGhlci1hLXN0cmluZy1tYXRjaGVzLWEtcmVnZXgtaW4tanMiLAogICAgICAgICAgICAidHdpdHRlcjphcHA6aWQ6Z29vZ2xlcGxheSI6ICJjb20uc3RhY2tleGNoYW5nZS5tYXJ2aW4iLAogICAgICAgICAgICAib2c6dHlwZSI6ICJ3ZWJzaXRlIiwKICAgICAgICAgICAgInR3aXR0ZXI6Y2FyZCI6ICJzdW1tYXJ5IiwKICAgICAgICAgICAgInR3aXR0ZXI6dGl0bGUiOiAiQ2hlY2sgd2hldGhlciBhIHN0cmluZyBtYXRjaGVzIGEgcmVnZXggaW4gSlMiLAogICAgICAgICAgICAib2c6c2l0ZV9uYW1lIjogIlN0YWNrIE92ZXJmbG93IiwKICAgICAgICAgICAgInR3aXR0ZXI6ZG9tYWluIjogInN0YWNrb3ZlcmZsb3cuY29tIiwKICAgICAgICAgICAgInR3aXR0ZXI6YXBwOnVybDppcGFkIjogInNlLXphcGhvZDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82NjAzMDE1L2NoZWNrLXdoZXRoZXItYS1zdHJpbmctbWF0Y2hlcy1hLXJlZ2V4LWluLWpzIiwKICAgICAgICAgICAgInR3aXR0ZXI6YXBwOmlkOmlwYWQiOiAiODcxMjk5NzIzIiwKICAgICAgICAgICAgInR3aXR0ZXI6YXBwOm5hbWU6Z29vZ2xlcGxheSI6ICJTdGFjayBFeGNoYW5nZSBBbmRyb2lkIiwKICAgICAgICAgICAgInR3aXR0ZXI6YXBwOmlkOmlwaG9uZSI6ICI4NzEyOTk3MjMiLAogICAgICAgICAgICAidHdpdHRlcjphcHA6dXJsOmdvb2dsZXBsYXkiOiAiaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjYwMzAxNS9jaGVjay13aGV0aGVyLWEtc3RyaW5nLW1hdGNoZXMtYS1yZWdleC1pbi1qcyIsCiAgICAgICAgICAgICJ0d2l0dGVyOmFwcDpuYW1lOmlwYWQiOiAiU3RhY2sgRXhjaGFuZ2UgaU9TIiwKICAgICAgICAgICAgInZpZXdwb3J0IjogIndpZHRoPWRldmljZS13aWR0aCwgaGVpZ2h0PWRldmljZS1oZWlnaHQsIGluaXRpYWwtc2NhbGU9MS4wLCBtaW5pbXVtLXNjYWxlPTEuMCIsCiAgICAgICAgICAgICJ0d2l0dGVyOmFwcDpjb3VudHJ5IjogIlVTIiwKICAgICAgICAgICAgInR3aXR0ZXI6ZGVzY3JpcHRpb24iOiAiSSB3YW50IHRvIHVzZSBKYXZhU2NyaXB0IChjYW4gYmUgd2l0aCBqUXVlcnkpIHRvIGRvIHNvbWUgY2xpZW50LXNpZGUgdmFsaWRhdGlvbiB0byBjaGVjayB3aGV0aGVyIGEgc3RyaW5nIG1hdGNoZXMgdGhlIHJlZ2V4OlxuXG5eKFthLXowLTldezUsfSkkXHJcbklkZWFsbHkgaXQgd291bGQgYmUgYW4gZXhwcmVzc2lvbiB0aGF0IHJldHVybmVkIHRydWUgb3IiLAogICAgICAgICAgICAib2c6dXJsIjogImh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzY2MDMwMTUvY2hlY2std2hldGhlci1hLXN0cmluZy1tYXRjaGVzLWEtcmVnZXgtaW4tanMiLAogICAgICAgICAgICAidHdpdHRlcjphcHA6bmFtZTppcGhvbmUiOiAiU3RhY2sgRXhjaGFuZ2UgaU9TIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImNzZV9pbWFnZSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL2Nkbi5zc3RhdGljLm5ldC9TaXRlcy9zdGFja292ZXJmbG93L0ltZy9hcHBsZS10b3VjaC1pY29uQDIucG5nP3Y9NzNkNzlhODliZGVkIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiY3VzdG9tc2VhcmNoI3Jlc3VsdCIsCiAgICAgICJ0aXRsZSI6ICJTdHJpbmcgVGVzdCAoRW50ZXJvLXRlc3QpOiBQdXJwb3NlLCBQcm9jZWR1cmUgJiBSZXN1bHRzIiwKICAgICAgImh0bWxUaXRsZSI6ICJcdTAwM2NiXHUwMDNlU3RyaW5nIFRlc3RcdTAwM2MvYlx1MDAzZSAoRW50ZXJvLVx1MDAzY2JcdTAwM2V0ZXN0XHUwMDNjL2JcdTAwM2UpOiBQdXJwb3NlLCBQcm9jZWR1cmUgJmFtcDsgUmVzdWx0cyIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vd3d3LmhlYWx0aGxpbmUuY29tL2hlYWx0aC9zdHJpbmctdGVzdCIsCiAgICAgICJkaXNwbGF5TGluayI6ICJ3d3cuaGVhbHRobGluZS5jb20iLAogICAgICAic25pcHBldCI6ICJBIHN0cmluZyB0ZXN0LCBhbHNvIGNhbGxlZCBhbiDigJxlbnRlcm8tdGVzdCzigJ0gaXMgb25lIHR5cGUgb2YgdGVzdCB1c2VkIHRvIGRldGVjdCB0aGUgcHJlc2VuY2Ugb2YgcGFyYXNpdGVzIGluIHRoZSB1cHBlciBwYXJ0IG9mIHRoZSBzbWFsbCBpbnRlc3RpbmUuIiwKICAgICAgImh0bWxTbmlwcGV0IjogIkEgXHUwMDNjYlx1MDAzZXN0cmluZyB0ZXN0XHUwMDNjL2JcdTAwM2UsIGFsc28gY2FsbGVkIGFuIOKAnGVudGVyby1cdTAwM2NiXHUwMDNldGVzdFx1MDAzYy9iXHUwMDNlLOKAnSBpcyBvbmUgdHlwZSBvZiBcdTAwM2NiXHUwMDNldGVzdFx1MDAzYy9iXHUwMDNlIHVzZWQgdG8gZGV0ZWN0IHRoZSBwcmVzZW5jZSBvZiBwYXJhc2l0ZXMgaW4gdGhlIHVwcGVyIHBhcnQgb2YgdGhlIHNtYWxsIGludGVzdGluZS4iLAogICAgICAiY2FjaGVJZCI6ICJPN3JwWGUwN1YwNEoiLAogICAgICAiZm9ybWF0dGVkVXJsIjogImh0dHBzOi8vd3d3LmhlYWx0aGxpbmUuY29tL2hlYWx0aC9zdHJpbmctdGVzdCIsCiAgICAgICJodG1sRm9ybWF0dGVkVXJsIjogImh0dHBzOi8vd3d3LmhlYWx0aGxpbmUuY29tL2hlYWx0aC9cdTAwM2NiXHUwMDNlc3RyaW5nXHUwMDNjL2JcdTAwM2UtXHUwMDNjYlx1MDAzZXRlc3RcdTAwM2MvYlx1MDAzZSIsCiAgICAgICJwYWdlbWFwIjogewogICAgICAgICJjc2VfdGh1bWJuYWlsIjogWwogICAgICAgICAgewogICAgICAgICAgICAic3JjIjogImh0dHBzOi8vZW5jcnlwdGVkLXRibjAuZ3N0YXRpYy5jb20vaW1hZ2VzP3E9dGJuOkFOZDlHY1F3cmxqX0V0bHpwbnV5Zm90bVdobzFDa1d5dFI4SlVmdERoZnpqR2JmWWdBIiwKICAgICAgICAgICAgIndpZHRoIjogIjIyNSIsCiAgICAgICAgICAgICJoZWlnaHQiOiAiMjI1IgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgIm1ldGF0YWdzIjogWwogICAgICAgICAgewogICAgICAgICAgICAib2c6aW1hZ2UiOiAiaHR0cHM6Ly9wb3N0LmhlYWx0aGxpbmUuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzA4L1N0cmluZ19UZXN0X0VudGVyby10ZXN0LTczMng1NDktdGh1bWJuYWlsLmpwZyIsCiAgICAgICAgICAgICJhcnRpY2xlOnB1Ymxpc2hlZF90aW1lIjogIjIwMTItMDctMjVUMDc6MDA6MDAuMDAwWiIsCiAgICAgICAgICAgICJvZzp0eXBlIjogImFydGljbGUiLAogICAgICAgICAgICAidHdpdHRlcjp0aXRsZSI6ICJTdHJpbmcgVGVzdCAoRW50ZXJvLXRlc3QpOiBQdXJwb3NlLCBQcm9jZWR1cmUgJiBSZXN1bHRzIiwKICAgICAgICAgICAgInR3aXR0ZXI6Y2FyZCI6ICJzdW1tYXJ5X2xhcmdlX2ltYWdlIiwKICAgICAgICAgICAgIm9nOmltYWdlOndpZHRoIjogIjczMiIsCiAgICAgICAgICAgICJzYWlsdGhydS50YWdzIjogIm90aGVyZGlnZXN0aXZlcHJvY2VkdXJlc25vbnN1cmdpY2FsLGRpZ2VzdGl2ZSIsCiAgICAgICAgICAgICJvZzpzaXRlX25hbWUiOiAiSGVhbHRobGluZSIsCiAgICAgICAgICAgICJrMSI6ICJvdGhlcmRpZ2VzdGl2ZXByb2NlZHVyZXNub25zdXJnaWNhbCIsCiAgICAgICAgICAgICJrMiI6ICJkaWdlc3RpdmUiLAogICAgICAgICAgICAib2c6dGl0bGUiOiAiU3RyaW5nIFRlc3QgKEVudGVyby10ZXN0KTogUHVycG9zZSwgUHJvY2VkdXJlICYgUmVzdWx0cyIsCiAgICAgICAgICAgICJvZzppbWFnZTpoZWlnaHQiOiAiNTQ5IiwKICAgICAgICAgICAgInNhaWx0aHJ1LmltYWdlLnRodW1iIjogImh0dHBzOi8vcG9zdC5oZWFsdGhsaW5lLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMC8wOC9TdHJpbmdfVGVzdF9FbnRlcm8tdGVzdC03MzJ4NTQ5LXRodW1ibmFpbC0xLTczMng1NDkuanBnIiwKICAgICAgICAgICAgIm9nOmRlc2NyaXB0aW9uIjogIkEgc3RyaW5nIHRlc3QsIG9yIFwiZW50ZXJvLXRlc3QsXCIgaXMgdXNlZCB0byBkZXRlY3QgdGhlIHByZXNlbmNlIG9mIHBhcmFzaXRlcyBpbiB0aGUgdXBwZXIgcGFydCBvZiB0aGUgc21hbGwgaW50ZXN0aW5lLiIsCiAgICAgICAgICAgICJ0d2l0dGVyOmNyZWF0b3IiOiAiQGhlYWx0aGxpbmUiLAogICAgICAgICAgICAiYXJ0aWNsZTphdXRob3IiOiAiQ29sbGVlbiBNLiBTdG9yeSIsCiAgICAgICAgICAgICJ0d2l0dGVyOmltYWdlIjogImh0dHBzOi8vcG9zdC5oZWFsdGhsaW5lLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMC8wOC9TdHJpbmdfVGVzdF9FbnRlcm8tdGVzdC03MzJ4NTQ5LXRodW1ibmFpbC0xLTczMng1NDkuanBnIiwKICAgICAgICAgICAgImZiOmFwcF9pZCI6ICIxNTI5NTk1NjgwNTkxOTE5IiwKICAgICAgICAgICAgInR3aXR0ZXI6c2l0ZSI6ICJAaGVhbHRobGluZSIsCiAgICAgICAgICAgICJ2aWV3cG9ydCI6ICJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSwgdXNlci1zY2FsYWJsZT1ubyIsCiAgICAgICAgICAgICJ0d2l0dGVyOmRlc2NyaXB0aW9uIjogIkEgc3RyaW5nIHRlc3QsIG9yIFwiZW50ZXJvLXRlc3QsXCIgaXMgdXNlZCB0byBkZXRlY3QgdGhlIHByZXNlbmNlIG9mIHBhcmFzaXRlcyBpbiB0aGUgdXBwZXIgcGFydCBvZiB0aGUgc21hbGwgaW50ZXN0aW5lLiIsCiAgICAgICAgICAgICJvZzp1cmwiOiAiaHR0cHM6Ly93d3cuaGVhbHRobGluZS5jb20vaGVhbHRoL3N0cmluZy10ZXN0IgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImNzZV9pbWFnZSI6IFsKICAgICAgICAgIHt9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgICAgInRpdGxlIjogInJlZ2V4MTAxOiBidWlsZCwgdGVzdCwgYW5kIGRlYnVnIHJlZ2V4IiwKICAgICAgImh0bWxUaXRsZSI6ICJyZWdleDEwMTogYnVpbGQsIFx1MDAzY2JcdTAwM2V0ZXN0XHUwMDNjL2JcdTAwM2UsIGFuZCBkZWJ1ZyByZWdleCIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vcmVnZXgxMDEuY29tLyIsCiAgICAgICJkaXNwbGF5TGluayI6ICJyZWdleDEwMS5jb20iLAogICAgICAic25pcHBldCI6ICJGdW5jdGlvbi4gTWF0Y2guIFN1YnN0aXR1dGlvbi4gTGlzdC4gVW5pdCBUZXN0cy4gVG9vbHMuIENvZGUgR2VuZXJhdG9yIMK3IFJlZ2V4IERlYnVnZ2VyLiBTcG9uc29ycyAuLi4gVGVzdCBTdHJpbmcuIEtleWJvYXJkIFNob3J0Y3V0cy4gU2hvcnRjdXQsIERlc2NyaXB0aW9uwqAuLi4iLAogICAgICAiaHRtbFNuaXBwZXQiOiAiRnVuY3Rpb24uIE1hdGNoLiBTdWJzdGl0dXRpb24uIExpc3QuIFVuaXQgVGVzdHMuIFRvb2xzLiBDb2RlIEdlbmVyYXRvciAmbWlkZG90OyBSZWdleCBEZWJ1Z2dlci4gU3BvbnNvcnMgLi4uIFx1MDAzY2JcdTAwM2VUZXN0IFN0cmluZ1x1MDAzYy9iXHUwMDNlLiBLZXlib2FyZCBTaG9ydGN1dHMuIFNob3J0Y3V0LCBEZXNjcmlwdGlvbiZuYnNwOy4uLiIsCiAgICAgICJjYWNoZUlkIjogIlRjRTdyZTZmZGpZSiIsCiAgICAgICJmb3JtYXR0ZWRVcmwiOiAiaHR0cHM6Ly9yZWdleDEwMS5jb20vIiwKICAgICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAiaHR0cHM6Ly9yZWdleDEwMS5jb20vIiwKICAgICAgInBhZ2VtYXAiOiB7CiAgICAgICAgImNzZV90aHVtYm5haWwiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cHM6Ly9lbmNyeXB0ZWQtdGJuMC5nc3RhdGljLmNvbS9pbWFnZXM/cT10Ym46QU5kOUdjU1M3WkRwd2lRTTVsQzZXNjRqUkIzMmFIVmRlTlhadUM2UjVkbG5DSGFyS2I5Y1R5V3k1MWV3bWdWUSIsCiAgICAgICAgICAgICJ3aWR0aCI6ICIzMTAiLAogICAgICAgICAgICAiaGVpZ2h0IjogIjE2MiIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJtZXRhdGFncyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm9nOmltYWdlIjogImh0dHBzOi8vcmVnZXgxMDEuY29tL3N0YXRpYy9hc3NldHMvY2FyZC5wbmciLAogICAgICAgICAgICAidGhlbWUtY29sb3IiOiAiIzMzNjZhNCIsCiAgICAgICAgICAgICJ0d2l0dGVyOmNhcmQiOiAic3VtbWFyeV9sYXJnZV9pbWFnZSIsCiAgICAgICAgICAgICJvZzppbWFnZTp3aWR0aCI6ICIxMjAwIiwKICAgICAgICAgICAgIm9nOnNpdGVfbmFtZSI6ICJyZWdleDEwMSIsCiAgICAgICAgICAgICJ0aXRsZSI6ICJyZWdleDEwMSIsCiAgICAgICAgICAgICJ0d2l0dGVyOmNyZWF0b3IiOiAiQHJlZ2V4MTAxIiwKICAgICAgICAgICAgIm9nOmRlc2NyaXB0aW9uIjogIlJlZ3VsYXIgZXhwcmVzc2lvbiB0ZXN0ZXIgd2l0aCBzeW50YXggaGlnaGxpZ2h0aW5nLCBleHBsYW5hdGlvbiwgY2hlYXQgc2hlZXQgZm9yIFBIUC9QQ1JFLCBQeXRob24sIEdPLCBKYXZhU2NyaXB0LCBKYXZhLCBDIy8uTkVULiIsCiAgICAgICAgICAgICJ0d2l0dGVyOmltYWdlIjogImh0dHBzOi8vcmVnZXgxMDEuY29tL3N0YXRpYy9hc3NldHMvY2FyZC5wbmciLAogICAgICAgICAgICAidHdpdHRlcjpzaXRlIjogIkByZWdleDEwMSIsCiAgICAgICAgICAgICJ0d2l0dGVyOnRpdGxlIjogInJlZ2V4MTAxOiBidWlsZCwgdGVzdCwgYW5kIGRlYnVnIHJlZ2V4IiwKICAgICAgICAgICAgIm9nOnR5cGUiOiAid2Vic2l0ZSIsCiAgICAgICAgICAgICJoYW5kaGVsZGZyaWVuZGx5IjogIlRydWUiLAogICAgICAgICAgICAidHdpdHRlcjpkb21haW4iOiAicmVnZXgxMDEuY29tIiwKICAgICAgICAgICAgImF1dGhvciI6ICJGaXJhcyBEaWIiLAogICAgICAgICAgICAib2c6dGl0bGUiOiAicmVnZXgxMDE6IGJ1aWxkLCB0ZXN0LCBhbmQgZGVidWcgcmVnZXgiLAogICAgICAgICAgICAib2c6aW1hZ2U6aGVpZ2h0IjogIjYzMCIsCiAgICAgICAgICAgICJnb29nbGUiOiAibm90cmFuc2xhdGUiLAogICAgICAgICAgICAiYXBwbGUtbW9iaWxlLXdlYi1hcHAtc3RhdHVzLWJhci1zdHlsZSI6ICJkZWZhdWx0IiwKICAgICAgICAgICAgInZpZXdwb3J0IjogIndpZHRoPWRldmljZS13aWR0aCwgbWluaW11bS1zY2FsZT0xLjAsIGluaXRpYWwtc2NhbGU9MS4wLCBtYXhpbXVtLXNjYWxlPTEuMCwgdXNlci1zY2FsYWJsZT1ubyIsCiAgICAgICAgICAgICJhcHBsZS1tb2JpbGUtd2ViLWFwcC1jYXBhYmxlIjogInllcyIsCiAgICAgICAgICAgICJ0d2l0dGVyOmRlc2NyaXB0aW9uIjogIlJlZ3VsYXIgZXhwcmVzc2lvbiB0ZXN0ZXIgd2l0aCBzeW50YXggaGlnaGxpZ2h0aW5nLCBleHBsYW5hdGlvbiwgY2hlYXQgc2hlZXQgZm9yIFBIUC9QQ1JFLCBQeXRob24sIEdPLCBKYXZhU2NyaXB0LCBKYXZhLCBDIy8uTkVULiIsCiAgICAgICAgICAgICJtb2JpbGVvcHRpbWl6ZWQiOiAiMzIwIiwKICAgICAgICAgICAgIm1vYmlsZS13ZWItYXBwLWNhcGFibGUiOiAieWVzIiwKICAgICAgICAgICAgIm9nOnVybCI6ICJodHRwczovL3JlZ2V4MTAxLmNvbS8iLAogICAgICAgICAgICAiZm9ybWF0LWRldGVjdGlvbiI6ICJ0ZWxlcGhvbmU9bm8iCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiY3NlX2ltYWdlIjogWwogICAgICAgICAgewogICAgICAgICAgICAic3JjIjogImh0dHBzOi8vcmVnZXgxMDEuY29tL3N0YXRpYy9hc3NldHMvY2FyZC5wbmciCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgICAgInRpdGxlIjogIlJlZ0V4cjogTGVhcm4sIEJ1aWxkLCAmIFRlc3QgUmVnRXgiLAogICAgICAiaHRtbFRpdGxlIjogIlJlZ0V4cjogTGVhcm4sIEJ1aWxkLCAmYW1wOyBcdTAwM2NiXHUwMDNlVGVzdFx1MDAzYy9iXHUwMDNlIFJlZ0V4IiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly9yZWdleHIuY29tLyIsCiAgICAgICJkaXNwbGF5TGluayI6ICJyZWdleHIuY29tIiwKICAgICAgInNuaXBwZXQiOiAiUmVndWxhciBleHByZXNzaW9uIHRlc3RlciB3aXRoIHN5bnRheCBoaWdobGlnaHRpbmcsIFBIUCAvIFBDUkUgJiBKUyBTdXBwb3J0LCBjb250ZXh0dWFsIGhlbHAsIGNoZWF0IHNoZWV0LCByZWZlcmVuY2UsIGFuZCBzZWFyY2hhYmxlIGNvbW11bml0eSBwYXR0ZXJucy4iLAogICAgICAiaHRtbFNuaXBwZXQiOiAiUmVndWxhciBleHByZXNzaW9uIHRlc3RlciB3aXRoIHN5bnRheCBoaWdobGlnaHRpbmcsIFBIUCAvIFBDUkUgJmFtcDsgSlMgU3VwcG9ydCwgY29udGV4dHVhbCBoZWxwLCBjaGVhdCBzaGVldCwgcmVmZXJlbmNlLCBhbmQgc2VhcmNoYWJsZSBjb21tdW5pdHkgcGF0dGVybnMuIiwKICAgICAgImNhY2hlSWQiOiAiR1N6OVotb2RmdkVKIiwKICAgICAgImZvcm1hdHRlZFVybCI6ICJodHRwczovL3JlZ2V4ci5jb20vIiwKICAgICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAiaHR0cHM6Ly9yZWdleHIuY29tLyIsCiAgICAgICJwYWdlbWFwIjogewogICAgICAgICJjc2VfdGh1bWJuYWlsIjogWwogICAgICAgICAgewogICAgICAgICAgICAic3JjIjogImh0dHBzOi8vZW5jcnlwdGVkLXRibjIuZ3N0YXRpYy5jb20vaW1hZ2VzP3E9dGJuOkFOZDlHY1JmSkFLREozbGduRVVILTVpUXluTUhOcVlDSU1LcDVBQ3gwNHFYdEJsNHUzRWhUOEl4NFVhdE1kTjIiLAogICAgICAgICAgICAid2lkdGgiOiAiMzEwIiwKICAgICAgICAgICAgImhlaWdodCI6ICIxNjMiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAibWV0YXRhZ3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJhcHBsaWNhdGlvbi1uYW1lIjogIlJlZ0V4ciIsCiAgICAgICAgICAgICJtc2FwcGxpY2F0aW9uLXRpbGVjb2xvciI6ICIjNzBiMGUwIiwKICAgICAgICAgICAgIm1zYXBwbGljYXRpb24tY29uZmlnIjogIi9hc3NldHMvaWNvbnMvYnJvd3NlcmNvbmZpZy54bWwiLAogICAgICAgICAgICAib2c6aW1hZ2UiOiAiaHR0cHM6Ly9yZWdleHIuY29tL2Fzc2V0cy9jYXJkLnBuZyIsCiAgICAgICAgICAgICJ0aGVtZS1jb2xvciI6ICIjNzBiMGUwIiwKICAgICAgICAgICAgIm9nOmltYWdlOndpZHRoIjogIjEyMDAiLAogICAgICAgICAgICAidHdpdHRlcjpjYXJkIjogInN1bW1hcnlfbGFyZ2VfaW1hZ2UiLAogICAgICAgICAgICAidHdpdHRlcjp0aXRsZSI6ICJSZWdFeHI6IExlYXJuLCBCdWlsZCwgJiBUZXN0IFJlZ0V4IiwKICAgICAgICAgICAgIm9nOnNpdGVfbmFtZSI6ICJSZWdFeHIiLAogICAgICAgICAgICAidHdpdHRlcjpzaXRlOmlkIjogIkBnc2tpbm5lciIsCiAgICAgICAgICAgICJ0d2l0dGVyOnVybCI6ICJodHRwczovL3JlZ2V4ci5jb20vIiwKICAgICAgICAgICAgImFwcGxlLW1vYmlsZS13ZWItYXBwLXRpdGxlIjogIlJlZ0V4ciIsCiAgICAgICAgICAgICJvZzp0aXRsZSI6ICJSZWdFeHI6IExlYXJuLCBCdWlsZCwgJiBUZXN0IFJlZ0V4IiwKICAgICAgICAgICAgIm9nOmltYWdlOmhlaWdodCI6ICI2MzAiLAogICAgICAgICAgICAidGl0bGUiOiAiUmVnRXhyOiBMZWFybiwgQnVpbGQsICYgVGVzdCBSZWdFeCIsCiAgICAgICAgICAgICJvZzpkZXNjcmlwdGlvbiI6ICJSZWdFeHIgaXMgYW4gb25saW5lIHRvb2wgdG8gbGVhcm4sIGJ1aWxkLCAmIHRlc3QgUmVndWxhciBFeHByZXNzaW9ucyAoUmVnRXggLyBSZWdFeHApLiIsCiAgICAgICAgICAgICJ0d2l0dGVyOmltYWdlIjogImh0dHBzOi8vcmVnZXhyLmNvbS9hc3NldHMvY2FyZC5wbmciLAogICAgICAgICAgICAidmlld3BvcnQiOiAid2lkdGg9NTAwLCB1c2VyLXNjYWxhYmxlPTAiLAogICAgICAgICAgICAidHdpdHRlcjpkZXNjcmlwdGlvbiI6ICJSZWdFeHIgaXMgYW4gb25saW5lIHRvb2wgdG8gbGVhcm4sIGJ1aWxkLCAmIHRlc3QgUmVndWxhciBFeHByZXNzaW9ucyAoUmVnRXggLyBSZWdFeHApLiIsCiAgICAgICAgICAgICJvZzp1cmwiOiAiaHR0cHM6Ly9yZWdleHIuY29tLyIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJjc2VfaW1hZ2UiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cHM6Ly9yZWdleHIuY29tL2Fzc2V0cy9jYXJkLnBuZyIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogImN1c3RvbXNlYXJjaCNyZXN1bHQiLAogICAgICAidGl0bGUiOiAiRXZhbHVhdGlvbiBvZiB0aGUgc3RyaW5nIHRlc3QgZm9yIHRoZSBkZXRlY3Rpb24gb2YgSGVsaWNvYmFjdGVyIHB5bG9yaSAuLi4iLAogICAgICAiaHRtbFRpdGxlIjogIkV2YWx1YXRpb24gb2YgdGhlIFx1MDAzY2JcdTAwM2VzdHJpbmcgdGVzdFx1MDAzYy9iXHUwMDNlIGZvciB0aGUgZGV0ZWN0aW9uIG9mIEhlbGljb2JhY3RlciBweWxvcmkgLi4uIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly93d3cubmNiaS5ubG0ubmloLmdvdi9wbWMvYXJ0aWNsZXMvUE1DNDYxMTMzNS8iLAogICAgICAiZGlzcGxheUxpbmsiOiAid3d3Lm5jYmkubmxtLm5paC5nb3YiLAogICAgICAic25pcHBldCI6ICJBSU06IEhlbGljb2JhY3RlciBweWxvcmkgY2FuIGJlIGRpYWdub3NlZCBieSBpbnZhc2l2ZSBvciBub24taW52YXNpdmUgdGVzdHMgYnV0IHRvIG9idGFpbiBiYWN0ZXJpYSBmb3IgY3VsdHVyZSBhbmQgYW50aWJpb3RpYyBzdXNjZXB0aWJpbGl0eSB0ZXN0aW5nLMKgLi4uIiwKICAgICAgImh0bWxTbmlwcGV0IjogIkFJTTogSGVsaWNvYmFjdGVyIHB5bG9yaSBjYW4gYmUgZGlhZ25vc2VkIGJ5IGludmFzaXZlIG9yIG5vbi1pbnZhc2l2ZSBcdTAwM2NiXHUwMDNldGVzdHNcdTAwM2MvYlx1MDAzZSBidXQgdG8gb2J0YWluIGJhY3RlcmlhIGZvciBjdWx0dXJlIGFuZCBhbnRpYmlvdGljIHN1c2NlcHRpYmlsaXR5IFx1MDAzY2JcdTAwM2V0ZXN0aW5nXHUwMDNjL2JcdTAwM2UsJm5ic3A7Li4uIiwKICAgICAgImZvcm1hdHRlZFVybCI6ICJodHRwczovL3d3dy5uY2JpLm5sbS5uaWguZ292L3BtYy9hcnRpY2xlcy9QTUM0NjExMzM1LyIsCiAgICAgICJodG1sRm9ybWF0dGVkVXJsIjogImh0dHBzOi8vd3d3Lm5jYmkubmxtLm5paC5nb3YvcG1jL2FydGljbGVzL1BNQzQ2MTEzMzUvIiwKICAgICAgInBhZ2VtYXAiOiB7CiAgICAgICAgIm1ldGF0YWdzIjogWwogICAgICAgICAgewogICAgICAgICAgICAiZGMucHVibGlzaGVyIjogIkJhaXNoaWRlbmcgUHVibGlzaGluZyBHcm91cCBJbmMiLAogICAgICAgICAgICAiY2l0YXRpb25fcHVibGljYXRpb25fZGF0ZSI6ICIyMDAzLzAyLzAyIiwKICAgICAgICAgICAgIm9nOmltYWdlIjogImh0dHBzOi8vd3d3Lm5jYmkubmxtLm5paC5nb3YvY29yZWh0bWwvcG1jL3BtY2dpZnMvcG1jLWxvZ28tc2hhcmUucG5nP189MCIsCiAgICAgICAgICAgICJjaXRhdGlvbl90aXRsZSI6ICJFdmFsdWF0aW9uIG9mIHRoZSBzdHJpbmcgdGVzdCBmb3IgdGhlIGRldGVjdGlvbiBvZiBIZWxpY29iYWN0ZXIgcHlsb3JpIiwKICAgICAgICAgICAgInR3aXR0ZXI6Y2FyZCI6ICJzdW1tYXJ5IiwKICAgICAgICAgICAgIm9nOnNpdGVfbmFtZSI6ICJQdWJNZWQgQ2VudHJhbCAoUE1DKSIsCiAgICAgICAgICAgICJjaXRhdGlvbl9yZWZlcmVuY2UiOiAiY2l0YXRpb25fam91cm5hbF90aXRsZT1BbGltZW50IFBoYXJtYWNvbCBUaGVyOyBjaXRhdGlvbl90aXRsZT1SZXZpZXcgYXJ0aWNsZTogaW52YXNpdmUgYW5kIG5vbi1pbnZhc2l2ZSB0ZXN0cyBmb3IgSGVsaWNvYmFjdGVyIHB5bG9yaSBpbmZlY3Rpb247IGNpdGF0aW9uX2F1dGhvcj1EIFZhaXJhOyBjaXRhdGlvbl9hdXRob3I9SiBIb2x0b247IGNpdGF0aW9uX2F1dGhvcj1NIE1lbmVnYXR0aTsgY2l0YXRpb25fYXV0aG9yPUMgUmljY2k7IGNpdGF0aW9uX2F1dGhvcj1MIEdhdHRhOyBjaXRhdGlvbl9hdXRob3I9QSBHZW1pbmlhbmk7IGNpdGF0aW9uX2F1dGhvcj1NIE1pZ2xpb2xpOyBjaXRhdGlvbl92b2x1bWU9MTQgU3VwcGwgMzsgY2l0YXRpb25fcHVibGljYXRpb25fZGF0ZT0yMDAwOyBjaXRhdGlvbl9maXJzdHBhZ2U9MTM7IGNpdGF0aW9uX2xhc3RwYWdlPTIyOyIsCiAgICAgICAgICAgICJjaXRhdGlvbl9qb3VybmFsX3RpdGxlIjogIldvcmxkIEpvdXJuYWwgb2YgR2FzdHJvZW50ZXJvbG9neSA6IFdKRyIsCiAgICAgICAgICAgICJuY2JpX3BkaWQiOiAiYXJ0aWNsZSIsCiAgICAgICAgICAgICJuY2JpX3BjaWQiOiAiL2FydGljbGVzL1BNQzQ2MTEzMzUvIiwKICAgICAgICAgICAgIm5jYmlfcGhpZCI6ICIzMjJDMEJGQjdEMzRFMDA1MDAwMDQ4QjQ1MjRBMUFDNy4xLm1fMiIsCiAgICAgICAgICAgICJvZzpkZXNjcmlwdGlvbiI6ICJBSU06IEhlbGljb2JhY3RlciBweWxvcmkgY2FuIGJlIGRpYWdub3NlZCBieSBpbnZhc2l2ZSBvciBub24taW52YXNpdmUgdGVzdHMgYnV0IHRvIG9idGFpbiBiYWN0ZXJpYSBmb3IgY3VsdHVyZSBhbmQgYW50aWJpb3RpYyBzdXNjZXB0aWJpbGl0eSB0ZXN0aW5nLCBhbiB1cHBlciBHSSBlbmRvc2NvcHkgaXMgb2Z0ZW4gcmVxdWlyZWQuIFRoZSBzdHJpbmcgdGVzdCBtYXkgYmUgYSBtaW5pbWFsbHktaW52YXNpdmUgYWx0ZXJuYXRpdmUgbWV0aG9kIC4uLiIsCiAgICAgICAgICAgICJuY2JpX2RiIjogInBtYyIsCiAgICAgICAgICAgICJ0d2l0dGVyOnNpdGUiOiAiQG5jYmkiLAogICAgICAgICAgICAiZGMudHlwZSI6ICJUZXh0IiwKICAgICAgICAgICAgImNpdGF0aW9uX2Z1bGx0ZXh0X2h0bWxfdXJsIjogIi9wbWMvYXJ0aWNsZXMvUE1DNDYxMTMzNS8iLAogICAgICAgICAgICAibmNiaV9hcHBfdmVyc2lvbiI6ICIxLjAuMC5wb3N0MSs1ODg2ZDY1IiwKICAgICAgICAgICAgIm5jYmlfdHlwZSI6ICJmdWxsdGV4dCIsCiAgICAgICAgICAgICJjaXRhdGlvbl9wbWlkIjogIjEyNTMyNDU1IiwKICAgICAgICAgICAgIm9nOnR5cGUiOiAiYXJ0aWNsZSIsCiAgICAgICAgICAgICJoYW5kaGVsZGZyaWVuZGx5IjogIlRydWUiLAogICAgICAgICAgICAibmNiaV9hcHAiOiAicG1jLWZyb250ZW5kIiwKICAgICAgICAgICAgIm9nOnRpdGxlIjogIkV2YWx1YXRpb24gb2YgdGhlIHN0cmluZyB0ZXN0IGZvciB0aGUgZGV0ZWN0aW9uIG9mIEhlbGljb2JhY3RlciBweWxvcmkiLAogICAgICAgICAgICAiY2l0YXRpb25fYXV0aG9yIjogIlJ1cGVydCBXTCBMZW9uZyIsCiAgICAgICAgICAgICJjaXRhdGlvbl9hYnN0cmFjdF9odG1sX3VybCI6ICIvcG1jL2FydGljbGVzL1BNQzQ2MTEzMzUvP3JlcG9ydD1hYnN0cmFjdCIsCiAgICAgICAgICAgICJkYy5kYXRlIjogIjIwMDMgRmViIDE1IiwKICAgICAgICAgICAgImNpdGF0aW9uX2lzc3VlIjogIjIiLAogICAgICAgICAgICAiZGMuY29udHJpYnV0b3IiOiAiUnVwZXJ0IFdMIExlb25nIiwKICAgICAgICAgICAgImNpdGF0aW9uX2ZpcnN0cGFnZSI6ICIzMDkiLAogICAgICAgICAgICAidmlld3BvcnQiOiAid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCIsCiAgICAgICAgICAgICJjaXRhdGlvbl9kb2kiOiAiMTAuMzc0OC93amcudjkuaTIuMzA5IiwKICAgICAgICAgICAgIm1vYmlsZW9wdGltaXplZCI6ICIzMjAiLAogICAgICAgICAgICAibmNiaV9vcCI6ICJyZXRyaWV2ZWQiLAogICAgICAgICAgICAiZGMudGl0bGUiOiAiRXZhbHVhdGlvbiBvZiB0aGUgc3RyaW5nIHRlc3QgZm9yIHRoZSBkZXRlY3Rpb24gb2YgSGVsaWNvYmFjdGVyIHB5bG9yaSIsCiAgICAgICAgICAgICJuY2JpX2RvbWFpbiI6ICJ3amciLAogICAgICAgICAgICAiZGMuaWRlbnRpZmllciI6ICIxMC4zNzQ4L3dqZy52OS5pMi4zMDkiLAogICAgICAgICAgICAiY2l0YXRpb25fdm9sdW1lIjogIjkiLAogICAgICAgICAgICAiZGMubGFuZ3VhZ2UiOiAiZW4iLAogICAgICAgICAgICAib2c6dXJsIjogImh0dHBzOi8vd3d3Lm5jYmkubmxtLm5paC5nb3YvcG1jL2FydGljbGVzL1BNQzQ2MTEzMzUvIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImNzZV9pbWFnZSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL3d3dy5uY2JpLm5sbS5uaWguZ292L2NvcmVodG1sL3BtYy9wbWNnaWZzL3BtYy1sb2dvLXNoYXJlLnBuZz9fPTAiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgICAgInRpdGxlIjogIlN0cmluZyBUZXN0IGZvciBHaWFyZGlhc2lzIiwKICAgICAgImh0bWxUaXRsZSI6ICJcdTAwM2NiXHUwMDNlU3RyaW5nIFRlc3RcdTAwM2MvYlx1MDAzZSBmb3IgR2lhcmRpYXNpcyIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vd2Eua2Fpc2VycGVybWFuZW50ZS5vcmcva2Jhc2UvdG9waWMuamh0bWw/ZG9jSWQ9aHcxODYxMTUiLAogICAgICAiZGlzcGxheUxpbmsiOiAid2Eua2Fpc2VycGVybWFuZW50ZS5vcmciLAogICAgICAic25pcHBldCI6ICJGb3IgdGhpcyB0ZXN0LCB5b3Ugc3dhbGxvdyBhIGdlbGF0aW4gY2Fwc3VsZSBhdHRhY2hlZCB0byBhIGxvbmcgc3RyaW5nLiBUaGUgZW5kIG9mIHRoZSBzdHJpbmcgcmVtYWlucyBvdXRzaWRlIHRoZSBtb3V0aCBhbmQgaXMgdGFwZWQgdG8geW91ciBjaGVlay4gVGhlIGNhcHN1bGXCoC4uLiIsCiAgICAgICJodG1sU25pcHBldCI6ICJGb3IgdGhpcyBcdTAwM2NiXHUwMDNldGVzdFx1MDAzYy9iXHUwMDNlLCB5b3Ugc3dhbGxvdyBhIGdlbGF0aW4gY2Fwc3VsZSBhdHRhY2hlZCB0byBhIGxvbmcgXHUwMDNjYlx1MDAzZXN0cmluZ1x1MDAzYy9iXHUwMDNlLiBUaGUgZW5kIG9mIHRoZSBcdTAwM2NiXHUwMDNlc3RyaW5nXHUwMDNjL2JcdTAwM2UgcmVtYWlucyBvdXRzaWRlIHRoZSBtb3V0aCBhbmQgaXMgdGFwZWQgdG8geW91ciBjaGVlay4gVGhlIGNhcHN1bGUmbmJzcDsuLi4iLAogICAgICAiY2FjaGVJZCI6ICJrRkM5UEllVV9mZ0oiLAogICAgICAiZm9ybWF0dGVkVXJsIjogImh0dHBzOi8vd2Eua2Fpc2VycGVybWFuZW50ZS5vcmcva2Jhc2UvdG9waWMuamh0bWw/ZG9jSWQ9aHcxODYxMTUiLAogICAgICAiaHRtbEZvcm1hdHRlZFVybCI6ICJodHRwczovL3dhLmthaXNlcnBlcm1hbmVudGUub3JnL2tiYXNlL3RvcGljLmpodG1sP2RvY0lkPWh3MTg2MTE1IiwKICAgICAgInBhZ2VtYXAiOiB7CiAgICAgICAgIm1ldGF0YWdzIjogWwogICAgICAgICAgewogICAgICAgICAgICAicGFnZXR5cGUiOiAiY29udGVudCIsCiAgICAgICAgICAgICJzbm9tZWRjdCI6ICIyNTI2NzIwMDYsMTA2NzkwMDcsMjQwMzY1MDAyLDI0MDM2OTAwOCw1ODI2NTAwNyw4OTkzMzAwMSIsCiAgICAgICAgICAgICJpY2QxMGNtIjogIkEwNy4xLEEwNy45IiwKICAgICAgICAgICAgImFic3RyYWN0IjogInB1YmxpYyIsCiAgICAgICAgICAgICJjb25zdW1lcnRpdGxlIjogIlN0cmluZyBUZXN0IGZvciBHaWFyZGlhc2lzIiwKICAgICAgICAgICAgImRvY3R5cGUiOiAiVGVzdERldGFpbCIsCiAgICAgICAgICAgICJ2aWV3cG9ydCI6ICJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSIsCiAgICAgICAgICAgICJjb250ZW50dmVyc2lvbiI6ICIxMS43IiwKICAgICAgICAgICAgImljZDljbSI6ICIwMDcuMSwwMDcuOSIsCiAgICAgICAgICAgICJhdXRob3Jpbmd2ZXJzaW9uIjogIjMuMTkiLAogICAgICAgICAgICAiY2F0ZWdvcmllcyI6ICJEaWdlc3Rpb24iLAogICAgICAgICAgICAiY2xpbmljYWx0aXRsZSI6ICJTdHJpbmcgVGVzdCBmb3IgR2lhcmRpYXNpcyIsCiAgICAgICAgICAgICJjYXRlZ29yeWlkIjogImNhdDEwMTEiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgICAgInRpdGxlIjogIk9uZS1Ib3VyIEVzb3BoYWdlYWwgU3RyaW5nIFRlc3Q6IEEgTm9uZW5kb3Njb3BpYyBNaW5pbWFsbHkgSSAuLi4iLAogICAgICAiaHRtbFRpdGxlIjogIk9uZS1Ib3VyIEVzb3BoYWdlYWwgXHUwMDNjYlx1MDAzZVN0cmluZyBUZXN0XHUwMDNjL2JcdTAwM2U6IEEgTm9uZW5kb3Njb3BpYyBNaW5pbWFsbHkgSSAuLi4iLAogICAgICAibGluayI6ICJodHRwczovL2pvdXJuYWxzLmx3dy5jb20vYWpnL0Z1bGx0ZXh0LzIwMTkvMTAwMDAvT25lX0hvdXJfRXNvcGhhZ2VhbF9TdHJpbmdfVGVzdF9fQV9Ob25lbmRvc2NvcGljLjEyLmFzcHgiLAogICAgICAiZGlzcGxheUxpbmsiOiAiam91cm5hbHMubHd3LmNvbSIsCiAgICAgICJzbmlwcGV0IjogIk9uZS1Ib3VyIEVzb3BoYWdlYWwgU3RyaW5nIFRlc3Q6IEEgTm9uZW5kb3Njb3BpYyBNaW5pbWFsbHkgSW52YXNpdmUgVGVzdCBUaGF0IEFjY3VyYXRlbHkgRGV0ZWN0cyBEaXNlYXNlIEFjdGl2aXR5IGluIEVvc2lub3BoaWxpYyBFc29waGFnaXRpcy4iLAogICAgICAiaHRtbFNuaXBwZXQiOiAiT25lLUhvdXIgRXNvcGhhZ2VhbCBcdTAwM2NiXHUwMDNlU3RyaW5nIFRlc3RcdTAwM2MvYlx1MDAzZTogQSBOb25lbmRvc2NvcGljIE1pbmltYWxseSBJbnZhc2l2ZSBcdTAwM2NiXHUwMDNlVGVzdFx1MDAzYy9iXHUwMDNlIFRoYXQgQWNjdXJhdGVseSBEZXRlY3RzIERpc2Vhc2UgQWN0aXZpdHkgaW4gRW9zaW5vcGhpbGljIEVzb3BoYWdpdGlzLiIsCiAgICAgICJmb3JtYXR0ZWRVcmwiOiAiaHR0cHM6Ly9qb3VybmFscy5sd3cuY29tLy4uLi9PbmVfSG91cl9Fc29waGFnZWFsX1N0cmluZ19UZXN0X19BXyBOb25lbmRvc2NvcGljLjEyLmFzcHgiLAogICAgICAiaHRtbEZvcm1hdHRlZFVybCI6ICJodHRwczovL2pvdXJuYWxzLmx3dy5jb20vLi4uL09uZV9Ib3VyX0Vzb3BoYWdlYWxfXHUwMDNjYlx1MDAzZVN0cmluZ1x1MDAzYy9iXHUwMDNlX1x1MDAzY2JcdTAwM2VUZXN0XHUwMDNjL2JcdTAwM2VfX0FfIE5vbmVuZG9zY29waWMuMTIuYXNweCIsCiAgICAgICJwYWdlbWFwIjogewogICAgICAgICJtZXRhdGFncyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImNpdGF0aW9uX3RpdGxlIjogIk9uZS1Ib3VyIEVzb3BoYWdlYWwgU3RyaW5nIFRlc3Q6IEEgTm9uZW5kb3Njb3BpYyBNaW5pbWFsbHkgSW52YXNpdmUgVGVzdCBUaGF0IEFjY3VyYXRlbHkgRGV0ZWN0cyBEaXNlYXNlIEFjdGl2aXR5IGluIEVvc2lub3BoaWxpYyBFc29waGFnaXRpcyIsCiAgICAgICAgICAgICJjaXRhdGlvbl9wdWJsaXNoZXIiOiAiTFdXIiwKICAgICAgICAgICAgImNpdGF0aW9uX2pvdXJuYWxfdGl0bGUiOiAiT2ZmaWNpYWwgam91cm5hbCBvZiB0aGUgQW1lcmljYW4gQ29sbGVnZSBvZiBHYXN0cm9lbnRlcm9sb2d5IHwgQUNHIiwKICAgICAgICAgICAgIndraGVhbHRoX2Fic3RyYWN0X2h0bWxfdXJsIjogImh0dHBzOi8vam91cm5hbHMubHd3LmNvbS9hamcvQWJzdHJhY3QvMjAxOS8xMDAwMC9PbmVfSG91cl9Fc29waGFnZWFsX1N0cmluZ19UZXN0X19BX05vbmVuZG9zY29waWMuMTIuYXNweCIsCiAgICAgICAgICAgICJ3a2hlYWx0aF9hdXRob3JzIjogIkFja2VybWFuLCBTdGV2ZW4gSi47S2FnYWx3YWxsYSwgQW1pciBGLjtIaXJhbm8sIElrdW87R29uc2FsdmVzLCBOaXJtYWxhO0thdGNoZXIsIFBhdWwgTWVuYXJkO0d1cHRhLCBTYW5kZWVwO1dlY2hzbGVyLCBKb3NodWEgQi47R3JvemRhbm92aWMsIE1pbGljYTtQYW4sIFpoYW94aW5nO01hc3RlcnNvbiwgSm9hbm5lIEMuO0R1LCBKaWFuO0ZhbnR1cywgUm9iZXJ0IEouO0FsdW1rYWwsIFByZWV0aDtMZWUsIEphbWVzIEouO09jaGt1ciwgU2VyZ2VpO0FobWVkLCBGYXJpYTtDYXBvY2VsbGksIEtlbGxleTtNZWxpbi1BbGRhbmEsIEhlY3RvcjtCaWV0dGUsIEthdGhyeW47RHVibmVyLCBBbGxpc29uO0Ftc2RlbiwgS2F0aWU7S2VlbGV5LCBLYWl0bGluO1N1bGtvd3NraSwgTWF1cmVlbjtaYWxld3NraSwgQW5nZWxpa2E7QXRraW5zLCBEYW47RnVydXRhLCBHbGVubiBULiIsCiAgICAgICAgICAgICJ0aXRsZSI6ICJPZmZpY2lhbCBqb3VybmFsIG9mIHRoZSBBbWVyaWNhbiBDb2xsZWdlIG9mIEdhc3Ryb2VudGVyb2xvZ3kgfCBBQ0ciLAogICAgICAgICAgICAid2toZWFsdGhfaW5zdGl0dXRpb25fdHlwZSI6ICJJUDsiLAogICAgICAgICAgICAid2toZWFsdGhfaXNzdWUiOiAiMTAiLAogICAgICAgICAgICAid2toZWFsdGhfZWpwaWQiOiAiYWpnOjIwMTk6MTAwMDA6MDAwMTIiLAogICAgICAgICAgICAid3Quc3YiOiAiWlVTRTFQRUpQV0VCMDQiLAogICAgICAgICAgICAid2toZWFsdGhfam91cm5hbF90aXRsZSI6ICJPZmZpY2lhbCBqb3VybmFsIG9mIHRoZSBBbWVyaWNhbiBDb2xsZWdlIG9mIEdhc3Ryb2VudGVyb2xvZ3kgfCBBQ0ciLAogICAgICAgICAgICAid2toZWFsdGhfb3ZpZF9hY2Nlc3Npb25fbnVtYmVyIjogIjAwMDAwNDM0LTIwMTkxMDAwMC0wMDAxMiIsCiAgICAgICAgICAgICJ3a2hlYWx0aF9pc3NuIjogIjAwMDItOTI3MCIsCiAgICAgICAgICAgICJ3a2hlYWx0aF9pbnN0aXR1dGlvbl9uYW1lIjogIkdPT0dMRTsiLAogICAgICAgICAgICAiY2l0YXRpb25fcG1pZCI6ICIzMTU2NzE5MiIsCiAgICAgICAgICAgICJ3a2hlYWx0aF9kb2kiOiAiMTAuMTQzMDkvYWpnLjAwMDAwMDAwMDAwMDAzNzEiLAogICAgICAgICAgICAid2toZWFsdGhfZmlyc3RwYWdlIjogIjE2MTQiLAogICAgICAgICAgICAid3QuY2dfcyI6ICJBcnRpY2xlcyxPcGVuIEFjY2VzcyBBcnRpY2xlcyIsCiAgICAgICAgICAgICJ3a2hlYWx0aF9mdWxsdGV4dF9odG1sX3VybCI6ICJodHRwczovL2pvdXJuYWxzLmx3dy5jb20vYWpnL0Z1bGx0ZXh0LzIwMTkvMTAwMDAvT25lX0hvdXJfRXNvcGhhZ2VhbF9TdHJpbmdfVGVzdF9fQV9Ob25lbmRvc2NvcGljLjEyLmFzcHgiLAogICAgICAgICAgICAiY2l0YXRpb25fYXV0aG9yIjogIlN0ZXZlbiBKLiBBY2tlcm1hbiIsCiAgICAgICAgICAgICJ3dC5jZ19uIjogImFqZyIsCiAgICAgICAgICAgICJ3a2hlYWx0aF9qb3VybmFsX3RpdGxlX2xlZ2FjeSI6ICJUaGUgQW1lcmljYW4gSm91cm5hbCBvZiBHYXN0cm9lbnRlcm9sb2d5IiwKICAgICAgICAgICAgIndraGVhbHRoX2FydGljbGVfcHVibGljYXRpb25fZGF0ZSI6ICJTZXB0ZW1iZXIgMTgsIDIwMTkiLAogICAgICAgICAgICAid2toZWFsdGhfdm9sdW1lIjogIjExNCIsCiAgICAgICAgICAgICJ2aWV3cG9ydCI6ICJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSIsCiAgICAgICAgICAgICJ3a2hlYWx0aF9wZGZfdXJsIjogImh0dHBzOi8vam91cm5hbHMubHd3LmNvbS9hamcvX2xheW91dHMvMTUvb2Frcy5qb3VybmFscy9kb3dubG9hZHBkZi5hc3B4P3RyY2tuZ19zcmNfcGc9T3RoZXImYW49MDAwMDA0MzQtMjAxOTEwMDAwLTAwMDEyIiwKICAgICAgICAgICAgImRjc2V4dC5mdWxsaHRtbHZpZXciOiAiMSIsCiAgICAgICAgICAgICJ3a2hlYWx0aF9kYXRlIjogIk9jdG9iZXIgMjAxOSIsCiAgICAgICAgICAgICJ3a2hlYWx0aF90b2Nfc2VjdGlvbiI6ICJBUlRJQ0xFIiwKICAgICAgICAgICAgIndraGVhbHRoX3RpdGxlIjogIk9uZS1Ib3VyIEVzb3BoYWdlYWwgU3RyaW5nIFRlc3Q6IEEgTm9uZW5kb3Njb3BpYyBNaW5pbWFsbHkgSW52YXNpdmUgVGVzdCBUaGF0IEFjY3VyYXRlbHkgRGV0ZWN0cyBEaXNlYXNlIEFjdGl2aXR5IGluIEVvc2lub3BoaWxpYyBFc29waGFnaXRpcyIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIH0KICBdCn0K
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:28:46 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=test%20string&start=11
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:28:47 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:28:47 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=test%20string&start=21
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:28:47 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogImN1c3RvbXNlYXJjaCNzZWFyY2giLAogICJ1cmwiOiB7CiAgICAidHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICJ0ZW1wbGF0ZSI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9jdXN0b21zZWFyY2gvdjE/cT17c2VhcmNoVGVybXN9Jm51bT17Y291bnQ/fSZzdGFydD17c3RhcnRJbmRleD99JmxyPXtsYW5ndWFnZT99JnNhZmU9e3NhZmU/fSZjeD17Y3g/fSZzb3J0PXtzb3J0P30mZmlsdGVyPXtmaWx0ZXI/fSZnbD17Z2w/fSZjcj17Y3I/fSZnb29nbGVob3N0PXtnb29nbGVIb3N0P30mYzJjb2ZmPXtkaXNhYmxlQ25Ud1RyYW5zbGF0aW9uP30maHE9e2hxP30maGw9e2hsP30mc2l0ZVNlYXJjaD17c2l0ZVNlYXJjaD99JnNpdGVTZWFyY2hGaWx0ZXI9e3NpdGVTZWFyY2hGaWx0ZXI/fSZleGFjdFRlcm1zPXtleGFjdFRlcm1zP30mZXhjbHVkZVRlcm1zPXtleGNsdWRlVGVybXM/fSZsaW5rU2l0ZT17bGlua1NpdGU/fSZvclRlcm1zPXtvclRlcm1zP30mcmVsYXRlZFNpdGU9e3JlbGF0ZWRTaXRlP30mZGF0ZVJlc3RyaWN0PXtkYXRlUmVzdHJpY3Q/fSZsb3dSYW5nZT17bG93UmFuZ2U/fSZoaWdoUmFuZ2U9e2hpZ2hSYW5nZT99JnNlYXJjaFR5cGU9e3NlYXJjaFR5cGV9JmZpbGVUeXBlPXtmaWxlVHlwZT99JnJpZ2h0cz17cmlnaHRzP30maW1nU2l6ZT17aW1nU2l6ZT99JmltZ1R5cGU9e2ltZ1R5cGU/fSZpbWdDb2xvclR5cGU9e2ltZ0NvbG9yVHlwZT99JmltZ0RvbWluYW50Q29sb3I9e2ltZ0RvbWluYW50Q29sb3I/fSZhbHQ9anNvbiIKICB9LAogICJxdWVyaWVzIjogewogICAgInByZXZpb3VzUGFnZSI6IFsKICAgICAgewogICAgICAgICJ0aXRsZSI6ICJHb29nbGUgQ3VzdG9tIFNlYXJjaCAtIHRlc3Qgc3RyaW5nIiwKICAgICAgICAidG90YWxSZXN1bHRzIjogIjc0MDAwMDAwMCIsCiAgICAgICAgInNlYXJjaFRlcm1zIjogInRlc3Qgc3RyaW5nIiwKICAgICAgICAiY291bnQiOiAxMCwKICAgICAgICAic3RhcnRJbmRleCI6IDExLAogICAgICAgICJpbnB1dEVuY29kaW5nIjogInV0ZjgiLAogICAgICAgICJvdXRwdXRFbmNvZGluZyI6ICJ1dGY4IiwKICAgICAgICAic2FmZSI6ICJvZmYiLAogICAgICAgICJjeCI6ICIwMDgzNDk1MTIwOTk2MTYwODcyNTc6Ml9hYTVmeDVmN2UiCiAgICAgIH0KICAgIF0sCiAgICAicmVxdWVzdCI6IFsKICAgICAgewogICAgICAgICJ0aXRsZSI6ICJHb29nbGUgQ3VzdG9tIFNlYXJjaCAtIHRlc3Qgc3RyaW5nIiwKICAgICAgICAidG90YWxSZXN1bHRzIjogIjc0MDAwMDAwMCIsCiAgICAgICAgInNlYXJjaFRlcm1zIjogInRlc3Qgc3RyaW5nIiwKICAgICAgICAiY291bnQiOiAxMCwKICAgICAgICAic3RhcnRJbmRleCI6IDIxLAogICAgICAgICJpbnB1dEVuY29kaW5nIjogInV0ZjgiLAogICAgICAgICJvdXRwdXRFbmNvZGluZyI6ICJ1dGY4IiwKICAgICAgICAic2FmZSI6ICJvZmYiLAogICAgICAgICJjeCI6ICIwMDgzNDk1MTIwOTk2MTYwODcyNTc6Ml9hYTVmeDVmN2UiCiAgICAgIH0KICAgIF0sCiAgICAibmV4dFBhZ2UiOiBbCiAgICAgIHsKICAgICAgICAidGl0bGUiOiAiR29vZ2xlIEN1c3RvbSBTZWFyY2ggLSB0ZXN0IHN0cmluZyIsCiAgICAgICAgInRvdGFsUmVzdWx0cyI6ICI3NDAwMDAwMDAiLAogICAgICAgICJzZWFyY2hUZXJtcyI6ICJ0ZXN0IHN0cmluZyIsCiAgICAgICAgImNvdW50IjogMTAsCiAgICAgICAgInN0YXJ0SW5kZXgiOiAzMSwKICAgICAgICAiaW5wdXRFbmNvZGluZyI6ICJ1dGY4IiwKICAgICAgICAib3V0cHV0RW5jb2RpbmciOiAidXRmOCIsCiAgICAgICAgInNhZmUiOiAib2ZmIiwKICAgICAgICAiY3giOiAiMDA4MzQ5NTEyMDk5NjE2MDg3MjU3OjJfYWE1Zng1ZjdlIgogICAgICB9CiAgICBdCiAgfSwKICAiY29udGV4dCI6IHsKICAgICJ0aXRsZSI6ICJMaW5ndWFGaW5kZXIgfCBkZXZlbG9wbWVudCIKICB9LAogICJzZWFyY2hJbmZvcm1hdGlvbiI6IHsKICAgICJzZWFyY2hUaW1lIjogMC4xOTMzMDksCiAgICAiZm9ybWF0dGVkU2VhcmNoVGltZSI6ICIwLjE5IiwKICAgICJ0b3RhbFJlc3VsdHMiOiAiNzQwMDAwMDAwIiwKICAgICJmb3JtYXR0ZWRUb3RhbFJlc3VsdHMiOiAiNzQwLDAwMCwwMDAiCiAgfSwKICAiaXRlbXMiOiBbCiAgICB7CiAgICAgICJraW5kIjogImN1c3RvbXNlYXJjaCNyZXN1bHQiLAogICAgICAidGl0bGUiOiAiRmVhc2liaWxpdHkgb2YgdGhlIHN0cmluZyB0ZXN0IGZvciB0dWJlcmN1bG9zaXMgZGlhZ25vc2lzIGluIGNoaWxkcmVuIC4uLiIsCiAgICAgICJodG1sVGl0bGUiOiAiRmVhc2liaWxpdHkgb2YgdGhlIFx1MDAzY2JcdTAwM2VzdHJpbmcgdGVzdFx1MDAzYy9iXHUwMDNlIGZvciB0dWJlcmN1bG9zaXMgZGlhZ25vc2lzIGluIGNoaWxkcmVuIC4uLiIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vYm1jaW5mZWN0ZGlzLmJpb21lZGNlbnRyYWwuY29tL2FydGljbGVzLzEwLjExODYvczEyODc5LTAxOC0zNDgzLTAiLAogICAgICAiZGlzcGxheUxpbmsiOiAiYm1jaW5mZWN0ZGlzLmJpb21lZGNlbnRyYWwuY29tIiwKICAgICAgInNuaXBwZXQiOiAiTm92IDE1LCAyMDE4IC4uLiBUaGUgZW50ZXJpYyBzdHJpbmcgdGVzdCBjYW4gYmUgdXNlZCB0byBvYnRhaW4gYSBzcGVjaW1lbiBmb3IgbWljcm9iaW9sb2dpY2FsIGNvbmZpcm1hdGlvbiBvZiB0dWJlcmN1bG9zaXMgaW4gY2hpbGRyZW4sIGJ1dCBpdCBpcyBub3Qgd2lkZWx5wqAuLi4iLAogICAgICAiaHRtbFNuaXBwZXQiOiAiTm92IDE1LCAyMDE4IFx1MDAzY2JcdTAwM2UuLi5cdTAwM2MvYlx1MDAzZSBUaGUgZW50ZXJpYyBcdTAwM2NiXHUwMDNlc3RyaW5nIHRlc3RcdTAwM2MvYlx1MDAzZSBjYW4gYmUgdXNlZCB0byBvYnRhaW4gYSBzcGVjaW1lbiBmb3IgbWljcm9iaW9sb2dpY2FsIGNvbmZpcm1hdGlvbiBvZiB0dWJlcmN1bG9zaXMgaW4gY2hpbGRyZW4sIGJ1dCBpdCBpcyBub3Qgd2lkZWx5Jm5ic3A7Li4uIiwKICAgICAgImNhY2hlSWQiOiAibUhGMmRadVh4SndKIiwKICAgICAgImZvcm1hdHRlZFVybCI6ICJodHRwczovL2JtY2luZmVjdGRpcy5iaW9tZWRjZW50cmFsLmNvbS9hcnRpY2xlcy8xMC4uLi9zMTI4NzktMDE4LTM0ODMtMCIsCiAgICAgICJodG1sRm9ybWF0dGVkVXJsIjogImh0dHBzOi8vYm1jaW5mZWN0ZGlzLmJpb21lZGNlbnRyYWwuY29tL2FydGljbGVzLzEwLi4uL3MxMjg3OS0wMTgtMzQ4My0wIiwKICAgICAgInBhZ2VtYXAiOiB7CiAgICAgICAgImNzZV90aHVtYm5haWwiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cHM6Ly9lbmNyeXB0ZWQtdGJuMy5nc3RhdGljLmNvbS9pbWFnZXM/cT10Ym46QU5kOUdjUWxqaHRGYm5BOHJPdDBrSVExemRLenJpbC1Eck0yRGpuZDRaT0pHb3d4aUMwSDVfMGlTR0MtUkpVIiwKICAgICAgICAgICAgIndpZHRoIjogIjIxNiIsCiAgICAgICAgICAgICJoZWlnaHQiOiAiMjMzIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgIm9yZ2FuaXphdGlvbiI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImxvZ28iOiAiaHR0cHM6Ly9ibWNpbmZlY3RkaXMuYmlvbWVkY2VudHJhbC5jb20vc3RhdGljL2ltYWdlcy9ibWMvbG9nb3MvbG9nby1ibWMtd2hpdGUtc2VyaWVzLWQxZjRlNGYwYTcuc3ZnIiwKICAgICAgICAgICAgInVybCI6ICJodHRwczovL3d3dy5iaW9tZWRjZW50cmFsLmNvbS8iCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAibWV0YXRhZ3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJkYy5wdWJsaXNoZXIiOiAiQmlvTWVkIENlbnRyYWwiLAogICAgICAgICAgICAicHJpc20uc3RhcnRpbmdwYWdlIjogIjEiLAogICAgICAgICAgICAiY2l0YXRpb25fcHVibGljYXRpb25fZGF0ZSI6ICIyMDE4LzEyIiwKICAgICAgICAgICAgImNpdGF0aW9uX3RpdGxlIjogIkZlYXNpYmlsaXR5IG9mIHRoZSBzdHJpbmcgdGVzdCBmb3IgdHViZXJjdWxvc2lzIGRpYWdub3NpcyBpbiBjaGlsZHJlbiBiZXR3ZWVuIDQgYW5kIDE0wqB5ZWFycyBvbGQiLAogICAgICAgICAgICAiY2l0YXRpb25fcHVibGlzaGVyIjogIkJpb01lZCBDZW50cmFsIiwKICAgICAgICAgICAgImNpdGF0aW9uX2pvdXJuYWxfdGl0bGUiOiAiQk1DIEluZmVjdGlvdXMgRGlzZWFzZXMiLAogICAgICAgICAgICAiYXBwbGljYWJsZS1kZXZpY2UiOiAicGMsbW9iaWxlIiwKICAgICAgICAgICAgImRjLmZvcm1hdCI6ICJ0ZXh0L2h0bWwiLAogICAgICAgICAgICAiZGMucmlnaHRzIjogIjIwMTggVGhlIEF1dGhvcihzKS4iLAogICAgICAgICAgICAicHJpc20ucHVibGljYXRpb25kYXRlIjogIjIwMTgtMTEtMTUiLAogICAgICAgICAgICAicHJpc20ucmlnaHRzYWdlbnQiOiAicmVwcmludHNAYmlvbWVkY2VudHJhbC5jb20iLAogICAgICAgICAgICAicHJpc20uaXNzbiI6ICIxNDcxLTIzMzQiLAogICAgICAgICAgICAiY2l0YXRpb25fb25saW5lX2RhdGUiOiAiMjAxOC8xMS8xNSIsCiAgICAgICAgICAgICJwcmlzbS5udW1iZXIiOiAiMSIsCiAgICAgICAgICAgICJjaXRhdGlvbl9pc3NuIjogIjE0NzEtMjMzNCIsCiAgICAgICAgICAgICJkYy5zb3VyY2UiOiAiQk1DIEluZmVjdGlvdXMgRGlzZWFzZXMgMjAxOCAxODoxIiwKICAgICAgICAgICAgImRjLnR5cGUiOiAiT3JpZ2luYWxQYXBlciIsCiAgICAgICAgICAgICJkYy5yaWdodHNhZ2VudCI6ICJyZXByaW50c0BiaW9tZWRjZW50cmFsLmNvbSIsCiAgICAgICAgICAgICJkYy5jb3B5cmlnaHQiOiAiMjAxOCBUaGUgQXV0aG9yKHMpLiIsCiAgICAgICAgICAgICJjaXRhdGlvbl9sYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJkYy5jcmVhdG9yIjogIlRhZnVyLCBLYXJsYSBULiIsCiAgICAgICAgICAgICJjaXRhdGlvbl9mdWxsdGV4dF9odG1sX3VybCI6ICJodHRwczovL2JtY2luZmVjdGRpcy5iaW9tZWRjZW50cmFsLmNvbS9hcnRpY2xlcy8xMC4xMTg2L3MxMjg3OS0wMTgtMzQ4My0wIiwKICAgICAgICAgICAgImNpdGF0aW9uX3BkZl91cmwiOiAiaHR0cHM6Ly9ibWNpbmZlY3RkaXMuYmlvbWVkY2VudHJhbC5jb20vdHJhY2svcGRmLzEwLjExODYvczEyODc5LTAxOC0zNDgzLTAiLAogICAgICAgICAgICAiY2l0YXRpb25fbGFzdHBhZ2UiOiAiOCIsCiAgICAgICAgICAgICJqb3VybmFsX2lkIjogIjEyODc5IiwKICAgICAgICAgICAgInByaXNtLnB1YmxpY2F0aW9ubmFtZSI6ICJCTUMgSW5mZWN0aW91cyBEaXNlYXNlcyIsCiAgICAgICAgICAgICJkYy5kZXNjcmlwdGlvbiI6ICJUaGUgZW50ZXJpYyBzdHJpbmcgdGVzdCBjYW4gYmUgdXNlZCB0byBvYnRhaW4gYSBzcGVjaW1lbiBmb3IgbWljcm9iaW9sb2dpY2FsIGNvbmZpcm1hdGlvbiBvZiB0dWJlcmN1bG9zaXMgaW4gY2hpbGRyZW4sIGJ1dCBpdCBpcyBub3Qgd2lkZWx5IHVzZWQgZm9yIHRoaXMuIFRoZSBhaW0gb2YgdGhpcyBhbmFseXNpcyB0byBldmFsdWF0ZSB0aGlzIGFwcHJvYWNoIGluIGNoaWxkcmVuIHdpdGggdHViZXJjdWxvc2lzIHN5bXB0b21zLiBXZSBjb25kdWN0ZWQgYSBjcm9zcy1zZWN0aW9uYWwgc3R1ZHkgdG8gYXNzZXNzIGNoaWxkcmVu4oCZcyBhYmlsaXR5IHRvIGNvbXBsZXRlIHRoZSB0ZXN0IChmZWFzaWJpbGl0eSksIGFuZCBzZWxmLXJlcG9ydGVkIHBhaW4gKHRvbGVyYWJpbGl0eSkuIFdlIGV4YW1pbmVkIGNhcmVnaXZlcnPigJkgYW5kIGNoaWxkcmVu4oCZcyB3aWxsaW5nbmVzcyB0byByZXBlYXQgdGhlIHByb2NlZHVyZSAoYWNjZXB0YWJpbGl0eSkgYW5kIGRlc2NyaWJlZCB0aGUgZGlhZ25vc3RpYyB5aWVsZCBvZiBjdWx0dXJlcyBmb3IgZGlhZ25vc3RpYyB0b29scy4gV2Ugc3RyYXRpZmllZCBlc3RpbWF0ZXMgYnkgYWdlIGFuZCBjb21wYXJlZCBtZXRyaWNzIHRvIHRob3NlIGRlcml2ZWQgZm9yIGdhc3RyaWMgYXNwaXJhdGUgKEdBKS4gQW1vbmcgMTQ4IGNoaWxkcmVuIHdobyBhdHRlbXB0ZWQgdGhlIHN0cmluZyB0ZXN0LCAzNCUgc3VjY2Vzc2Z1bGx5IHN3YWxsb3dlZCB0aGUgY2Fwc3VsZS4gRmVhc2liaWxpdHkgd2FzIGhpZ2hlciBhbW9uZyBjaGlsZHJlbiBhZ2VkIDEx4oCTMTQgdGhhbiBpbiBjaGlsZHJlbiA04oCTMTAmbmJzcDt5ZWFycyAoODMlIHZzIDIyJSByZXNwZWN0aXZlbHksIHDigIkmbHQ74oCJMC4wMDAxKS4gVGhlIHN0cmluZyB0ZXN0IHdhcyBiZXR0ZXIgdG9sZXJhdGVkIHRoYW4gR0EgaW4gYm90aCBhZ2UgZ3JvdXBzOyBob3dldmVyLCBndWFyZGlhbnMgYW5kIG9sZGVyIGNoaWxkcmVuIHJlcG9ydGVkIGhpZ2hlciByYXRlcyBvZiB3aWxsaW5nbmVzcyB0byByZXBlYXQgR0EgIiwKICAgICAgICAgICAgImNpdGF0aW9uX2pvdXJuYWxfYWJicmV2IjogIkJNQyBJbmZlY3QgRGlzIiwKICAgICAgICAgICAgImNpdGF0aW9uX2FydGljbGVfdHlwZSI6ICJSZXNlYXJjaCBhcnRpY2xlIiwKICAgICAgICAgICAgImNpdGF0aW9uX2Fic3RyYWN0IjogIlRoZSBlbnRlcmljIHN0cmluZyB0ZXN0IGNhbiBiZSB1c2VkIHRvIG9idGFpbiBhIHNwZWNpbWVuIGZvciBtaWNyb2Jpb2xvZ2ljYWwgY29uZmlybWF0aW9uIG9mIHR1YmVyY3Vsb3NpcyBpbiBjaGlsZHJlbiwgYnV0IGl0IGlzIG5vdCB3aWRlbHkgdXNlZCBmb3IgdGhpcy4gVGhlIGFpbSBvZiB0aGlzIGFuYWx5c2lzIHRvIGV2YWx1YXRlIHRoaXMgYXBwcm9hY2ggaW4gY2hpbGRyZW4gd2l0aCB0dWJlcmN1bG9zaXMgc3ltcHRvbXMuIFdlIGNvbmR1Y3RlZCBhIGNyb3NzLXNlY3Rpb25hbCBzdHVkeSB0byBhc3Nlc3MgY2hpbGRyZW7igJlzIGFiaWxpdHkgdG8gY29tcGxldGUgdGhlIHRlc3QgKGZlYXNpYmlsaXR5KSwgYW5kIHNlbGYtcmVwb3J0ZWQgcGFpbiAodG9sZXJhYmlsaXR5KS4gV2UgZXhhbWluZWQgY2FyZWdpdmVyc+KAmSBhbmQgY2hpbGRyZW7igJlzIHdpbGxpbmduZXNzIHRvIHJlcGVhdCB0aGUgcHJvY2VkdXJlIChhY2NlcHRhYmlsaXR5KSBhbmQgZGVzY3JpYmVkIHRoZSBkaWFnbm9zdGljIHlpZWxkIG9mIGN1bHR1cmVzIGZvciBkaWFnbm9zdGljIHRvb2xzLiBXZSBzdHJhdGlmaWVkIGVzdGltYXRlcyBieSBhZ2UgYW5kIGNvbXBhcmVkIG1ldHJpY3MgdG8gdGhvc2UgZGVyaXZlZCBmb3IgZ2FzdHJpYyBhc3BpcmF0ZSAoR0EpLiBBbW9uZyAxNDggY2hpbGRyZW4gd2hvIGF0dGVtcHRlZCB0aGUgc3RyaW5nIHRlc3QsIDM0JSBzdWNjZXNzZnVsbHkgc3dhbGxvd2VkIHRoZSBjYXBzdWxlLiBGZWFzaWJpbGl0eSB3YXMgaGlnaGVyIGFtb25nIGNoaWxkcmVuIGFnZWQgMTHigJMxNCB0aGFuIGluIGNoaWxkcmVuIDTigJMxMMKgeWVhcnMgKDgzJSB2cyAyMiUgcmVzcGVjdGl2ZWx5LCBw4oCJXHUwMDNj4oCJMC4wMDAxKS4gVGhlIHN0cmluZyB0ZXN0IHdhcyBiZXR0ZXIgdG9sZXJhdGVkIHRoYW4gR0EgaW4gYm90aCBhZ2UgZ3JvdXBzOyBob3dldmVyLCBndWFyZGlhbnMgYW5kIG9sZGVyIGNoaWxkcmVuIHJlcG9ydGVkIGhpZ2hlciByYXRlcyBvZiB3aWxsaW5nbmVzcyB0byByZXBlYXQgR0EgdGhhbiB0aCIsCiAgICAgICAgICAgICJwcmlzbS5kb2kiOiAiZG9pOjEwLjExODYvczEyODc5LTAxOC0zNDgzLTAiLAogICAgICAgICAgICAiZGMuZGF0ZSI6ICIyMDE4LTExLTE1IiwKICAgICAgICAgICAgInByaXNtLmVuZGluZ3BhZ2UiOiAiOCIsCiAgICAgICAgICAgICJjaXRhdGlvbl9zcHJpbmdlcl9hcGlfdXJsIjogImh0dHA6Ly9hcGkuc3ByaW5nZXIuY29tL3htbGRhdGEvamF0cz9xPWRvaToxMC4xMTg2L3MxMjg3OS0wMTgtMzQ4My0wJmFwaV9rZXk9IiwKICAgICAgICAgICAgImNpdGF0aW9uX2lzc3VlIjogIjEiLAogICAgICAgICAgICAicHJpc20udm9sdW1lIjogIjE4IiwKICAgICAgICAgICAgImNpdGF0aW9uX2ZpcnN0cGFnZSI6ICIxIiwKICAgICAgICAgICAgInZpZXdwb3J0IjogIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIiwKICAgICAgICAgICAgImNpdGF0aW9uX2RvaSI6ICIxMC4xMTg2L3MxMjg3OS0wMTgtMzQ4My0wIiwKICAgICAgICAgICAgImRjLnRpdGxlIjogIkZlYXNpYmlsaXR5IG9mIHRoZSBzdHJpbmcgdGVzdCBmb3IgdHViZXJjdWxvc2lzIGRpYWdub3NpcyBpbiBjaGlsZHJlbiBiZXR3ZWVuIDQgYW5kIDE0wqB5ZWFycyBvbGQiLAogICAgICAgICAgICAicHJpc20uc2VjdGlvbiI6ICJPcmlnaW5hbFBhcGVyIiwKICAgICAgICAgICAgInByaXNtLnVybCI6ICJodHRwczovL2JtY2luZmVjdGRpcy5iaW9tZWRjZW50cmFsLmNvbS9hcnRpY2xlcy8xMC4xMTg2L3MxMjg3OS0wMTgtMzQ4My0wIiwKICAgICAgICAgICAgImRjLmlkZW50aWZpZXIiOiAiZG9pOjEwLjExODYvczEyODc5LTAxOC0zNDgzLTAiLAogICAgICAgICAgICAiY2l0YXRpb25fdm9sdW1lIjogIjE4IiwKICAgICAgICAgICAgImRjLmxhbmd1YWdlIjogIkVuIiwKICAgICAgICAgICAgInByaXNtLmNvcHlyaWdodCI6ICIyMDE4IFRoZSBBdXRob3IocykuIiwKICAgICAgICAgICAgImRvaSI6ICIxMC4xMTg2L3MxMjg3OS0wMTgtMzQ4My0wIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImNzZV9pbWFnZSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL21lZGlhLnNwcmluZ2VybmF0dXJlLmNvbS9sdzY4NS9zcHJpbmdlci1zdGF0aWMvaW1hZ2UvYXJ0JTNBMTAuMTE4NiUyRnMxMjg3OS0wMTgtMzQ4My0wL01lZGlhT2JqZWN0cy8xMjg3OV8yMDE4XzM0ODNfRmlnMV9IVE1MLnBuZyIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogImN1c3RvbXNlYXJjaCNyZXN1bHQiLAogICAgICAidGl0bGUiOiAiUHV0dGluZyBzdHJpbmcgdGhlb3J5IHRvIHRoZSB0ZXN0IHwgU3BhY2UiLAogICAgICAiaHRtbFRpdGxlIjogIlB1dHRpbmcgXHUwMDNjYlx1MDAzZXN0cmluZ1x1MDAzYy9iXHUwMDNlIHRoZW9yeSB0byB0aGUgXHUwMDNjYlx1MDAzZXRlc3RcdTAwM2MvYlx1MDAzZSB8IFNwYWNlIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly93d3cuc3BhY2UuY29tL3B1dHRpbmctc3RyaW5nLXRoZW9yeS10by10ZXN0Lmh0bWwiLAogICAgICAiZGlzcGxheUxpbmsiOiAid3d3LnNwYWNlLmNvbSIsCiAgICAgICJzbmlwcGV0IjogIk1hciAyMCwgMjAyMCAuLi4gQnV0IGV2ZW4gaWYgd2UgY291bGQgZGV2aXNlIGEgcGFydGljbGUgY29sbGlkZXIgdG8gZGlyZWN0bHkgcHJvYmUgdGhlIGVuZXJnaWVzIG9mIHF1YW50dW0gZ3Jhdml0eSwgd2UgY291bGRuJ3QgdGVzdCBzdHJpbmcgdGhlb3J5LMKgLi4uIiwKICAgICAgImh0bWxTbmlwcGV0IjogIk1hciAyMCwgMjAyMCBcdTAwM2NiXHUwMDNlLi4uXHUwMDNjL2JcdTAwM2UgQnV0IGV2ZW4gaWYgd2UgY291bGQgZGV2aXNlIGEgcGFydGljbGUgY29sbGlkZXIgdG8gZGlyZWN0bHkgcHJvYmUgdGhlIGVuZXJnaWVzIG9mIHF1YW50dW0gZ3Jhdml0eSwgd2UgY291bGRuJiMzOTt0IFx1MDAzY2JcdTAwM2V0ZXN0IHN0cmluZ1x1MDAzYy9iXHUwMDNlIHRoZW9yeSwmbmJzcDsuLi4iLAogICAgICAiY2FjaGVJZCI6ICJYOUVqT2VGS2FaVUoiLAogICAgICAiZm9ybWF0dGVkVXJsIjogImh0dHBzOi8vd3d3LnNwYWNlLmNvbS9wdXR0aW5nLXN0cmluZy10aGVvcnktdG8tdGVzdC5odG1sIiwKICAgICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAiaHR0cHM6Ly93d3cuc3BhY2UuY29tL3B1dHRpbmctXHUwMDNjYlx1MDAzZXN0cmluZ1x1MDAzYy9iXHUwMDNlLXRoZW9yeS10by1cdTAwM2NiXHUwMDNldGVzdFx1MDAzYy9iXHUwMDNlLmh0bWwiLAogICAgICAicGFnZW1hcCI6IHsKICAgICAgICAiY3NlX3RodW1ibmFpbCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL2VuY3J5cHRlZC10Ym4yLmdzdGF0aWMuY29tL2ltYWdlcz9xPXRibjpBTmQ5R2NSU3V3d0lNaEhzUEVxVm9KenM0aFVDMWY2aUliRkZFbjlqdDdkVEhub05pU1lhYTJlSnRMUXo3WGsyIiwKICAgICAgICAgICAgIndpZHRoIjogIjI1OSIsCiAgICAgICAgICAgICJoZWlnaHQiOiAiMTk1IgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImltYWdlb2JqZWN0IjogWwogICAgICAgICAgewogICAgICAgICAgICAiY29weXJpZ2h0aG9sZGVyIjogIihJbWFnZSBjcmVkaXQ6IFx1MDAzY2EgaHJlZj1cImh0dHA6Ly93d3cuc2h1dHRlcnN0b2NrLmNvbS9nYWxsZXJ5LTE1NDExMXAxLmh0bWxcIlx1MDAzZU1pY2hhZWwgVGF5bG9yXHUwMDNjL2FcdTAwM2UgfCBcdTAwM2NhIGhyZWY9XCJodHRwOi8vd3d3LnNodXR0ZXJzdG9jay5jb20vXCJcdTAwM2VzaHV0dGVyc3RvY2tcdTAwM2MvYVx1MDAzZSkiLAogICAgICAgICAgICAid2lkdGgiOiAiMzM4IiwKICAgICAgICAgICAgImNhcHRpb24iOiAiSW4gc3RyaW5nIHRoZW9yeSwgdGlueSBiaXRzIG9mIHN0cmluZyByZXBsYWNlIHRyYWRpdGlvbmFsIHN1YmF0b21pYyBwYXJ0aWNsZXMuIChJbWFnZSBjcmVkaXQ6IFx1MDAzY2EgaHJlZj1cImh0dHA6Ly93d3cuc2h1dHRlcnN0b2NrLmNvbS9nYWxsZXJ5LTE1NDExMXAxLmh0bWxcIlx1MDAzZU1pY2hhZWwgVGF5bG9yXHUwMDNjL2FcdTAwM2UgfCBcdTAwM2NhIGhyZWY9XCJodHRwOi8vd3d3LnNoLi4uIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkluIHN0cmluZyB0aGVvcnksIHRpbnkgYml0cyBvZiBzdHJpbmcgcmVwbGFjZSB0cmFkaXRpb25hbCBzdWJhdG9taWMgcGFydGljbGVzLiAoSW1hZ2UgY3JlZGl0OiBcdTAwM2NhIGhyZWY9XCJodHRwOi8vd3d3LnNodXR0ZXJzdG9jay5jb20vZ2FsbGVyeS0xNTQxMTFwMS5odG1sXCJcdTAwM2VNaWNoYWVsIFRheWxvclx1MDAzYy9hXHUwMDNlIHwgXHUwMDNjYSBocmVmPVwiaHR0cDovL3d3dy5zaC4uLiIsCiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9jZG4ubW9zLmNtcy5mdXR1cmVjZG4ubmV0L29vaDlpenVIN2tRTVhrb3piYjVDQTMuanBnIiwKICAgICAgICAgICAgImhlaWdodCI6ICI2MDAiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAibWV0YXRhZ3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJwOmRvbWFpbl92ZXJpZnkiOiAiNjg3MzkxMWEwOTYwMjQ0YjA4MDZkN2E5YTJhYmE2OWIiLAogICAgICAgICAgICAib2c6aW1hZ2UiOiAiaHR0cHM6Ly9jZG4ubW9zLmNtcy5mdXR1cmVjZG4ubmV0L29vaDlpenVIN2tRTVhrb3piYjVDQTMtMTIwMC04MC5qcGciLAogICAgICAgICAgICAib2c6aW1hZ2U6d2lkdGgiOiAiMTIwMCIsCiAgICAgICAgICAgICJhcnRpY2xlOnB1Ymxpc2hlZF90aW1lIjogIjIwMjAtMDMtMjBUMTE6MzY6NDFaIiwKICAgICAgICAgICAgInR3aXR0ZXI6Y2FyZCI6ICJzdW1tYXJ5X2xhcmdlX2ltYWdlIiwKICAgICAgICAgICAgInRoZW1lLWNvbG9yIjogIiMzNjY5YzkiLAogICAgICAgICAgICAib2c6c2l0ZV9uYW1lIjogIlNwYWNlLmNvbSIsCiAgICAgICAgICAgICJ0YWJvb2xhOnVybCI6ICJodHRwczovL3d3dy5zcGFjZS5jb20vcHV0dGluZy1zdHJpbmctdGhlb3J5LXRvLXRlc3QuaHRtbCIsCiAgICAgICAgICAgICJwYXJzZWx5LWF1dGhvciI6ICJQYXVsIFN1dHRlciIsCiAgICAgICAgICAgICJtc2FwcGxpY2F0aW9uLXRpbGVpbWFnZSI6ICJodHRwczovL3ZhbmlsbGEuZnV0dXJlY2RuLm5ldC9zcGFjZS81MDA1MzQvYXBwbGUtdG91Y2gtaWNvbi5wbmciLAogICAgICAgICAgICAib2c6ZGVzY3JpcHRpb24iOiAiTGV0J3MgZXhwbG9yZSBob3cgd2UgY291bGQgdGVzdCB0aGlzIHdvdWxkLWJlIFwidGhlb3J5IG9mIGV2ZXJ5dGhpbmcuXCIiLAogICAgICAgICAgICAidHdpdHRlcjpjcmVhdG9yIjogIkBTUEFDRWRvdGNvbSIsCiAgICAgICAgICAgICJhcnRpY2xlOnB1Ymxpc2hlciI6ICJodHRwczovL3d3dy5mYWNlYm9vay5jb20vc3BhY2Vjb20iLAogICAgICAgICAgICAidHdpdHRlcjppbWFnZSI6ICJodHRwczovL2Nkbi5tb3MuY21zLmZ1dHVyZWNkbi5uZXQvb29oOWl6dUg3a1FNWGtvemJiNUNBMy0xMjAwLTgwLmpwZyIsCiAgICAgICAgICAgICJwdWJfZGF0ZSI6ICIyMDIwLTAzLTIwVDExOjM2OjQxKzAwOjAwIiwKICAgICAgICAgICAgInBhcnNlbHktdHlwZSI6ICJwb3N0IiwKICAgICAgICAgICAgInR3aXR0ZXI6c2l0ZSI6ICJAU1BBQ0Vkb3Rjb20iLAogICAgICAgICAgICAiYXJ0aWNsZTptb2RpZmllZF90aW1lIjogIjIwMjAtMDUtMDdUMTk6NDE6NDEuMjY4WiIsCiAgICAgICAgICAgICJwYXJzZWx5LWxpbmsiOiAiaHR0cHM6Ly93d3cuc3BhY2UuY29tL3B1dHRpbmctc3RyaW5nLXRoZW9yeS10by10ZXN0Lmh0bWwiLAogICAgICAgICAgICAicGFyc2VseS1pbWFnZS11cmwiOiAiaHR0cHM6Ly9jZG4ubW9zLmNtcy5mdXR1cmVjZG4ubmV0L29vaDlpenVIN2tRTVhrb3piYjVDQTMuanBnIiwKICAgICAgICAgICAgInBhcnNlbHktc2VjdGlvbiI6ICJFeHBlcnQgVm9pY2VzIFBhdWwgU3V0dGVyIiwKICAgICAgICAgICAgImJvdGlmeS1zaXRlLXZlcmlmaWNhdGlvbiI6ICIycHpjUVpGaWJMams5R0pnU1pnd2VBOE1VOWFsNnV0QSIsCiAgICAgICAgICAgICJ0d2l0dGVyOmFjY291bnRfaWQiOiAiOTY5NjE0MiIsCiAgICAgICAgICAgICJtc2FwcGxpY2F0aW9uLXRpbGVjb2xvciI6ICIjMDAwMDAwIiwKICAgICAgICAgICAgIm9nOnR5cGUiOiAiYXJ0aWNsZSIsCiAgICAgICAgICAgICJ0d2l0dGVyOnRpdGxlIjogIlB1dHRpbmcgc3RyaW5nIHRoZW9yeSB0byB0aGUgdGVzdCIsCiAgICAgICAgICAgICJwYXJzZWx5LXBvc3QtaWQiOiAiQnd5NWU2d3haQzdaWXRKdXFGc3RpSCIsCiAgICAgICAgICAgICJtc3ZhbGlkYXRlLjAxIjogIkNDNDYyRTZERjkxNDkyMDg2MTQ1Q0E1RUJEQ0I2MTVFIiwKICAgICAgICAgICAgIm9nOnRpdGxlIjogIlB1dHRpbmcgc3RyaW5nIHRoZW9yeSB0byB0aGUgdGVzdCIsCiAgICAgICAgICAgICJwYXJzZWx5LXRpdGxlIjogIlB1dHRpbmcgc3RyaW5nIHRoZW9yeSB0byB0aGUgdGVzdCIsCiAgICAgICAgICAgICJwYXJzZWx5LXB1Yi1kYXRlIjogIjIwMjAtMDMtMjBUMTE6MzY6NDFaIiwKICAgICAgICAgICAgInBhcnNlbHktdGFncyI6ICJDYXRlZ29yeTogRXhwZXJ0IFZvaWNlcyBQYXVsIFN1dHRlcixDYXRlZ29yeTogT3RoZXIsQ2F0ZWdvcnk6IE5ld3MsZXhwZXJ0LXZvaWNlcy1wYXVsLXN1dHRlcixzdHJpbmcgdGhlb3J5LGJpZyBiYW5nLGNvc21pYyBzdHJpbmdzLHN1cGVyc3ltbWV0cnksZ2VuZXJhbCByZWxhdGl2aXR5LHRoZW9yeSBvZiBldmVyeXRoaW5nLExhcmdlIEhhZHJvbiBDb2xsaWRlcixsaGMsc3BhY2UuY29tLWV4cGVydC12b2ljZXMtYmFubmVyLGNoYW5uZWxfb3RoZXIsdHlwZV9uZXdzLHN5bmRpY2F0ZSxzZXJ2ZXJzaWRlaGF3ayx2aWRlb2FydGljbGUiLAogICAgICAgICAgICAidmlld3BvcnQiOiAid2lkdGg9ZGV2aWNlLXdpZHRoLG1pbmltdW0tc2NhbGU9MSxpbml0aWFsLXNjYWxlPTEiLAogICAgICAgICAgICAidHdpdHRlcjpkZXNjcmlwdGlvbiI6ICJMZXQncyBleHBsb3JlIGhvdyB3ZSBjb3VsZCB0ZXN0IHRoaXMgd291bGQtYmUgXCJ0aGVvcnkgb2YgZXZlcnl0aGluZy5cIiIsCiAgICAgICAgICAgICJvZzp1cmwiOiAiaHR0cHM6Ly93d3cuc3BhY2UuY29tL3B1dHRpbmctc3RyaW5nLXRoZW9yeS10by10ZXN0Lmh0bWwiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiY3NlX2ltYWdlIjogWwogICAgICAgICAgewogICAgICAgICAgICAic3JjIjogImh0dHBzOi8vY2RuLm1vcy5jbXMuZnV0dXJlY2RuLm5ldC9vb2g5aXp1SDdrUU1Ya296YmI1Q0EzLTEyMDAtODAuanBnIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiY3VzdG9tc2VhcmNoI3Jlc3VsdCIsCiAgICAgICJ0aXRsZSI6ICJDQTE4MjA6IFRlc3QgZm9yIGVtcHR5IHN0cmluZ3MgdXNpbmcgc3RyaW5nIGxlbmd0aCAoY29kZSBhbmFseXNpcyAuLi4iLAogICAgICAiaHRtbFRpdGxlIjogIkNBMTgyMDogXHUwMDNjYlx1MDAzZVRlc3RcdTAwM2MvYlx1MDAzZSBmb3IgZW1wdHkgXHUwMDNjYlx1MDAzZXN0cmluZ3NcdTAwM2MvYlx1MDAzZSB1c2luZyBcdTAwM2NiXHUwMDNlc3RyaW5nXHUwMDNjL2JcdTAwM2UgbGVuZ3RoIChjb2RlIGFuYWx5c2lzIC4uLiIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2RvdG5ldC9mdW5kYW1lbnRhbHMvY29kZS1hbmFseXNpcy9xdWFsaXR5LXJ1bGVzL2NhMTgyMCIsCiAgICAgICJkaXNwbGF5TGluayI6ICJkb2NzLm1pY3Jvc29mdC5jb20iLAogICAgICAic25pcHBldCI6ICJKdW4gMTUsIDIwMjIgLi4uIFRlc3RpbmcgZm9yIG51bGwgZG9lcyBub3Qgc2lnbmlmaWNhbnRseSBhZmZlY3QgdGhlIHJlbGF0aXZlIHBlcmZvcm1hbmNlIG9mIHRoZXNlIHR3byBhcHByb2FjaGVzLiBXaGVuIHRhcmdldGluZyAuTkVUIEZyYW1ld29yayAyLjAgb3IgbGF0ZXIsIHVzZcKgLi4uIiwKICAgICAgImh0bWxTbmlwcGV0IjogIkp1biAxNSwgMjAyMiBcdTAwM2NiXHUwMDNlLi4uXHUwMDNjL2JcdTAwM2UgXHUwMDNjYlx1MDAzZVRlc3RpbmdcdTAwM2MvYlx1MDAzZSBmb3IgbnVsbCBkb2VzIG5vdCBzaWduaWZpY2FudGx5IGFmZmVjdCB0aGUgcmVsYXRpdmUgcGVyZm9ybWFuY2Ugb2YgdGhlc2UgdHdvIGFwcHJvYWNoZXMuIFdoZW4gdGFyZ2V0aW5nIC5ORVQgRnJhbWV3b3JrIDIuMCBvciBsYXRlciwgdXNlJm5ic3A7Li4uIiwKICAgICAgImNhY2hlSWQiOiAibzJFX1RKSWdBdjBKIiwKICAgICAgImZvcm1hdHRlZFVybCI6ICJodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9kb3RuZXQvZnVuZGFtZW50YWxzL2NvZGUuLi4vY2ExODIwIiwKICAgICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAiaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2Z1bmRhbWVudGFscy9jb2RlLi4uL2NhMTgyMCIsCiAgICAgICJwYWdlbWFwIjogewogICAgICAgICJjc2VfdGh1bWJuYWlsIjogWwogICAgICAgICAgewogICAgICAgICAgICAic3JjIjogImh0dHBzOi8vZW5jcnlwdGVkLXRibjAuZ3N0YXRpYy5jb20vaW1hZ2VzP3E9dGJuOkFOZDlHY1FCRU5uUXVleUlsNmFJM01FdUd0cVlONW04TWV4VURucGJCMnVCV3JqSGJfNWJQSDFUNW1wRE8yY1oiLAogICAgICAgICAgICAid2lkdGgiOiAiMjI1IiwKICAgICAgICAgICAgImhlaWdodCI6ICIyMjUiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAib3JnYW5pemF0aW9uIjogWwogICAgICAgICAgewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgIm1ldGF0YWdzIjogWwogICAgICAgICAgewogICAgICAgICAgICAic2NoZW1hIjogIkNvbmNlcHR1YWwiLAogICAgICAgICAgICAib2c6aW1hZ2UiOiAiaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZG90bmV0L21lZGlhL2RvdG5ldC1sb2dvLnBuZyIsCiAgICAgICAgICAgICJ0d2l0dGVyOmNhcmQiOiAic3VtbWFyeSIsCiAgICAgICAgICAgICJtcy5hdXRob3IiOiAiZ2V3YXJyZW4iLAogICAgICAgICAgICAibXMudG9waWMiOiAicmVmZXJlbmNlIiwKICAgICAgICAgICAgInBhZ2VfdHlwZSI6ICJjb25jZXB0dWFsIiwKICAgICAgICAgICAgIm1zLmRldmxhbmciOiAiZG90bmV0IiwKICAgICAgICAgICAgImRvY3VtZW50X2lkIjogImJmOWU5MWE2LWY2YTktMWQ2Ny05MGM5LWQ1MjRhNThhM2RiNyIsCiAgICAgICAgICAgICJsb2NhbGUiOiAiZW4tdXMiLAogICAgICAgICAgICAib2c6ZGVzY3JpcHRpb24iOiAiTGVhcm4gYWJvdXQgY29kZSBhbmFseXNpcyBydWxlIENBMTgyMDogVGVzdCBmb3IgZW1wdHkgc3RyaW5ncyB1c2luZyBzdHJpbmcgbGVuZ3RoIiwKICAgICAgICAgICAgIm1zLmRhdGUiOiAiMTEvMDQvMjAxNiIsCiAgICAgICAgICAgICJyZWNvbW1lbmRhdGlvbnMiOiAiZmFsc2UiLAogICAgICAgICAgICAiZGVwb3RfbmFtZSI6ICJWUy5jb3JlLWRvY3MiLAogICAgICAgICAgICAiZ2l0aHViX2ZlZWRiYWNrX2NvbnRlbnRfZ2l0X3VybCI6ICJodHRwczovL2dpdGh1Yi5jb20vZG90bmV0L2RvY3MvYmxvYi9tYWluL2RvY3MvZnVuZGFtZW50YWxzL2NvZGUtYW5hbHlzaXMvcXVhbGl0eS1ydWxlcy9jYTE4MjAubWQiLAogICAgICAgICAgICAid29yZF9jb3VudCI6ICI0MDEiLAogICAgICAgICAgICAidHdpdHRlcjpzaXRlIjogIkBkb2NzbXNmdCIsCiAgICAgICAgICAgICJ1cGRhdGVkX2F0IjogIjIwMjItMDYtMTUgMDk6NDkgQU0iLAogICAgICAgICAgICAiYXBpcGxhdGZvcm0iOiAiZG90bmV0IiwKICAgICAgICAgICAgIm9yaWdpbmFsX2NvbnRlbnRfZ2l0X3VybCI6ICJodHRwczovL2dpdGh1Yi5jb20vZG90bmV0L2RvY3MvYmxvYi9saXZlL2RvY3MvZnVuZGFtZW50YWxzL2NvZGUtYW5hbHlzaXMvcXVhbGl0eS1ydWxlcy9jYTE4MjAubWQiLAogICAgICAgICAgICAic2NvcGUiOiAiLk5FVCIsCiAgICAgICAgICAgICJtcy5wcm9kIjogImRvdG5ldC1mdW5kYW1lbnRhbHMiLAogICAgICAgICAgICAicGRmX3VybF90ZW1wbGF0ZSI6ICJodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9wZGZzdG9yZS9lbi11cy9WUy5jb3JlLWRvY3Mve2JyYW5jaE5hbWV9e3BkZk5hbWV9IiwKICAgICAgICAgICAgIm9nOnR5cGUiOiAid2Vic2l0ZSIsCiAgICAgICAgICAgICJvZzppbWFnZTphbHQiOiAiQ0ExODIwOiBUZXN0IGZvciBlbXB0eSBzdHJpbmdzIHVzaW5nIHN0cmluZyBsZW5ndGggKGNvZGUgYW5hbHlzaXMpIC0gLk5FVCB8IE1pY3Jvc29mdCBEb2NzIiwKICAgICAgICAgICAgImF1dGhvciI6ICJnZXdhcnJlbiIsCiAgICAgICAgICAgICJvZzp0aXRsZSI6ICJDQTE4MjA6IFRlc3QgZm9yIGVtcHR5IHN0cmluZ3MgdXNpbmcgc3RyaW5nIGxlbmd0aCAoY29kZSBhbmFseXNpcykgLSAuTkVUIiwKICAgICAgICAgICAgInNlYXJjaC5tc2hhdHRyLmRldmxhbmciOiAiY3NoYXJwIiwKICAgICAgICAgICAgImNvbG9yLXNjaGVtZSI6ICJsaWdodCBkYXJrIiwKICAgICAgICAgICAgInNpdGVfbmFtZSI6ICJEb2NzIiwKICAgICAgICAgICAgInZpZXdwb3J0IjogIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiLAogICAgICAgICAgICAiYnJlYWRjcnVtYl9wYXRoIjogIi9kb3RuZXQvYnJlYWRjcnVtYi90b2MuanNvbiIsCiAgICAgICAgICAgICJkb2N1bWVudF92ZXJzaW9uX2luZGVwZW5kZW50X2lkIjogIjQzYTNlNGUzLTczODAtNTYzMy05ZGE5LTYzNTVkMmNjMzU5MiIsCiAgICAgICAgICAgICJjbXByb2R1Y3RzIjogImh0dHBzOi8vYXV0aG9yaW5nLWRvY3MtbWljcm9zb2Z0LnBvb2xwYXJ0eS5iaXovZGV2cmVsLzc2OTZjZGE2LTA1MTAtNDdmNi04MzAyLTcxYmI1ZDJlMjhjZiIsCiAgICAgICAgICAgICJvZzp1cmwiOiAiaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2Z1bmRhbWVudGFscy9jb2RlLWFuYWx5c2lzL3F1YWxpdHktcnVsZXMvY2ExODIwIiwKICAgICAgICAgICAgInVoZmhlYWRlcmlkIjogIk1TRG9jc0hlYWRlci1Eb3ROZXQiLAogICAgICAgICAgICAidG9jX3JlbCI6ICIuLi8uLi90b2MuanNvbiIsCiAgICAgICAgICAgICJnaXRjb21taXQiOiAiaHR0cHM6Ly9naXRodWIuY29tL2RvdG5ldC9kb2NzL2Jsb2IvNGU5ZmMwYzgzMGIyNzFjMjg4YWI5ODdiNzg2MWQzZjk1MjU2MmRlNi9kb2NzL2Z1bmRhbWVudGFscy9jb2RlLWFuYWx5c2lzL3F1YWxpdHktcnVsZXMvY2ExODIwLm1kIiwKICAgICAgICAgICAgInNob3dfbGF0ZXgiOiAidHJ1ZSIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJjc2VfaW1hZ2UiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZG90bmV0L21lZGlhL2RvdG5ldC1sb2dvLnBuZyIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogImN1c3RvbXNlYXJjaCNyZXN1bHQiLAogICAgICAidGl0bGUiOiAianF1ZW5zZS95dXA6IERlYWQgc2ltcGxlIE9iamVjdCBzY2hlbWEgdmFsaWRhdGlvbiAtIEdpdEh1YiIsCiAgICAgICJodG1sVGl0bGUiOiAianF1ZW5zZS95dXA6IERlYWQgc2ltcGxlIE9iamVjdCBzY2hlbWEgdmFsaWRhdGlvbiAtIEdpdEh1YiIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlbnNlL3l1cCIsCiAgICAgICJkaXNwbGF5TGluayI6ICJnaXRodWIuY29tIiwKICAgICAgInNuaXBwZXQiOiAiU2VwIDIzLCAyMDE0IC4uLiBQYXJzaW5nOiBUcmFuc2Zvcm1zOyBWYWxpZGF0aW9uOiBUZXN0czsgQ29tcG9zaXRpb24gYW5kIFJldXNlIC4uLiBTY2hlbWEudGVzdChuYW1lOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZyB8IGZ1bmN0aW9uIHwgYW55LCB0ZXN0OsKgLi4uIiwKICAgICAgImh0bWxTbmlwcGV0IjogIlNlcCAyMywgMjAxNCBcdTAwM2NiXHUwMDNlLi4uXHUwMDNjL2JcdTAwM2UgUGFyc2luZzogVHJhbnNmb3JtczsgVmFsaWRhdGlvbjogXHUwMDNjYlx1MDAzZVRlc3RzXHUwMDNjL2JcdTAwM2U7IENvbXBvc2l0aW9uIGFuZCBSZXVzZSAuLi4gU2NoZW1hLlx1MDAzY2JcdTAwM2V0ZXN0XHUwMDNjL2JcdTAwM2UobmFtZTogXHUwMDNjYlx1MDAzZXN0cmluZ1x1MDAzYy9iXHUwMDNlLCBtZXNzYWdlOiBcdTAwM2NiXHUwMDNlc3RyaW5nXHUwMDNjL2JcdTAwM2UgfCBmdW5jdGlvbiB8IGFueSwgXHUwMDNjYlx1MDAzZXRlc3RcdTAwM2MvYlx1MDAzZTombmJzcDsuLi4iLAogICAgICAiY2FjaGVJZCI6ICJ6MFZPeWhkSGN6SUoiLAogICAgICAiZm9ybWF0dGVkVXJsIjogImh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlbnNlL3l1cCIsCiAgICAgICJodG1sRm9ybWF0dGVkVXJsIjogImh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlbnNlL3l1cCIsCiAgICAgICJwYWdlbWFwIjogewogICAgICAgICJzb2Z0d2FyZXNvdXJjZWNvZGUiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJsaWNlbnNlIjogIkxJQ0VOU0UubWQiLAogICAgICAgICAgICAiYXV0aG9yIjogImpxdWVuc2UiLAogICAgICAgICAgICAibmFtZSI6ICJ5dXAiLAogICAgICAgICAgICAidGV4dCI6ICJZdXAgWXVwIGlzIGEgc2NoZW1hIGJ1aWxkZXIgZm9yIHJ1bnRpbWUgdmFsdWUgcGFyc2luZyBhbmQgdmFsaWRhdGlvbi4gRGVmaW5lIGEgc2NoZW1hLCB0cmFuc2Zvcm0gYSB2YWx1ZSB0byBtYXRjaCwgYXNzZXJ0IHRoZSBzaGFwZSBvZiBhbiBleGlzdGluZyB2YWx1ZSwgb3IgYm90aC4gWXVwIHNjaGVtYSBhcmUgZXh0cmVtZWx5IGV4cHJlc3Npdi4uLiIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJtZXRhdGFncyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm9jdG9seXRpY3MtdXJsIjogImh0dHBzOi8vY29sbGVjdG9yLmdpdGh1Yi5jb20vZ2l0aHViL2NvbGxlY3QiLAogICAgICAgICAgICAiYXBwbGUtaXR1bmVzLWFwcCI6ICJhcHAtaWQ9MTQ3NzM3NjkwNSIsCiAgICAgICAgICAgICJvZzppbWFnZSI6ICJodHRwczovL29wZW5ncmFwaC5naXRodWJhc3NldHMuY29tLzBiYWJmYWY5NWY0NzVkNjlmMTA1MmFhNjI5YTkyY2U1ZjE3YjYyNTg0ZTA0MmVmYWM5NzMyODM1MDE0MTZlN2EvanF1ZW5zZS95dXAiLAogICAgICAgICAgICAidHdpdHRlcjpjYXJkIjogInN1bW1hcnlfbGFyZ2VfaW1hZ2UiLAogICAgICAgICAgICAib2c6aW1hZ2U6d2lkdGgiOiAiMTIwMCIsCiAgICAgICAgICAgICJ0aGVtZS1jb2xvciI6ICIjMWUyMzI3IiwKICAgICAgICAgICAgIm9nOnNpdGVfbmFtZSI6ICJHaXRIdWIiLAogICAgICAgICAgICAiaG92ZXJjYXJkLXN1YmplY3QtdGFnIjogInJlcG9zaXRvcnk6MjQzNDk4MzIiLAogICAgICAgICAgICAidHVyYm8tYm9keS1jbGFzc2VzIjogImxvZ2dlZC1vdXQgZW52LXByb2R1Y3Rpb24gcGFnZS1yZXNwb25zaXZlIiwKICAgICAgICAgICAgImh0bWwtc2FmZS1ub25jZSI6ICI2NzE2ODBmMGJiZjA1YjVmZTRlZWYwYjYxYzU3M2MwZWMyN2Q4MjdjZmY4ZThjNmRlNjMwZjQyMTMxZDRlZjMxIiwKICAgICAgICAgICAgImV4cGVjdGVkLWhvc3RuYW1lIjogImdpdGh1Yi5jb20iLAogICAgICAgICAgICAib2c6ZGVzY3JpcHRpb24iOiAiRGVhZCBzaW1wbGUgT2JqZWN0IHNjaGVtYSB2YWxpZGF0aW9uLiBDb250cmlidXRlIHRvIGpxdWVuc2UveXVwIGRldmVsb3BtZW50IGJ5IGNyZWF0aW5nIGFuIGFjY291bnQgb24gR2l0SHViLiIsCiAgICAgICAgICAgICJicm93c2VyLWVycm9ycy11cmwiOiAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9fcHJpdmF0ZS9icm93c2VyL2Vycm9ycyIsCiAgICAgICAgICAgICJvY3RvbHl0aWNzLWRpbWVuc2lvbi11c2VyX2xvZ2luIjogImpxdWVuc2UiLAogICAgICAgICAgICAiaG9zdG5hbWUiOiAiZ2l0aHViLmNvbSIsCiAgICAgICAgICAgICJ0d2l0dGVyOnNpdGUiOiAiQGdpdGh1YiIsCiAgICAgICAgICAgICJicm93c2VyLXN0YXRzLXVybCI6ICJodHRwczovL2FwaS5naXRodWIuY29tL19wcml2YXRlL2Jyb3dzZXIvc3RhdHMiLAogICAgICAgICAgICAidmlzaXRvci1wYXlsb2FkIjogImV5SnlaV1psY25KbGNpSTZJaUlzSW5KbGNYVmxjM1JmYVdRaU9pSTRPREZHT2pZME1UWTZNVUk1UkVSRE5Ub3lSVGd5TXpneU9qWXlRemt3TWtZNUlpd2lkbWx6YVhSdmNsOXBaQ0k2SWpRd016Z3pOemszTXpJeU9ERTJOVFl3TlRraUxDSnlaV2RwYjI1ZlpXUm5aU0k2SW1saFpDSXNJbkpsWjJsdmJsOXlaVzVrWlhJaU9pSnBZV1FpZlE9PSIsCiAgICAgICAgICAgICJnaXRodWIta2V5Ym9hcmQtc2hvcnRjdXRzIjogInJlcG9zaXRvcnkiLAogICAgICAgICAgICAib2N0b2x5dGljcy1kaW1lbnNpb24tcmVwb3NpdG9yeV9pZCI6ICIyNDM0OTgzMiIsCiAgICAgICAgICAgICJvY3RvbHl0aWNzLWRpbWVuc2lvbi1yZXBvc2l0b3J5X25ldHdvcmtfcm9vdF9ud28iOiAianF1ZW5zZS95dXAiLAogICAgICAgICAgICAiZW5hYmxlZC1mZWF0dXJlcyI6ICJJTUFHRV9NRVRSSUNfVFJBQ0tJTkcsR0VPSlNPTl9BWlVSRV9NQVBTIiwKICAgICAgICAgICAgInR3aXR0ZXI6dGl0bGUiOiAiR2l0SHViIC0ganF1ZW5zZS95dXA6IERlYWQgc2ltcGxlIE9iamVjdCBzY2hlbWEgdmFsaWRhdGlvbiIsCiAgICAgICAgICAgICJvZzppbWFnZTphbHQiOiAiRGVhZCBzaW1wbGUgT2JqZWN0IHNjaGVtYSB2YWxpZGF0aW9uLiBDb250cmlidXRlIHRvIGpxdWVuc2UveXVwIGRldmVsb3BtZW50IGJ5IGNyZWF0aW5nIGFuIGFjY291bnQgb24gR2l0SHViLiIsCiAgICAgICAgICAgICJvZzp0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICJvcHRpbWl6ZWx5LWRhdGFmaWxlIjogIntcImdyb3Vwc1wiOiBbXSwgXCJlbnZpcm9ubWVudEtleVwiOiBcInByb2R1Y3Rpb25cIiwgXCJyb2xsb3V0c1wiOiBbXSwgXCJ0eXBlZEF1ZGllbmNlc1wiOiBbXSwgXCJwcm9qZWN0SWRcIjogXCIxNjczNzc2MDE3MFwiLCBcInZhcmlhYmxlc1wiOiBbXSwgXCJmZWF0dXJlRmxhZ3NcIjogW10sIFwiZXhwZXJpbWVudHNcIjogW3tcInN0YXR1c1wiOiBcIlJ1bm5pbmdcIiwgXCJhdWRpZW5jZUlkc1wiOiBbXSwgXCJ2YXJpYXRpb25zXCI6IFt7XCJ2YXJpYWJsZXNcIjogW10sIFwiaWRcIjogXCIyMDY2NzM4MTAxOFwiLCBcImtleVwiOiBcImNvbnRyb2xcIn0sIHtcInZhcmlhYmxlc1wiOiBbXSwgXCJpZFwiOiBcIjIwNjgwOTMwNzU5XCIsIFwia2V5XCI6IFwidHJlYXRtZW50XCJ9XSwgXCJpZFwiOiBcIjIwNjUyNTcwODk3XCIsIFwia2V5XCI6IFwicHJvamVjdF9nZW5lc2lzXCIsIFwibGF5ZXJJZFwiOiBcIjIwNjcyMzAwMzYzXCIsIFwidHJhZmZpY0FsbG9jYXRpb25cIjogW3tcImVudGl0eUlkXCI6IFwiMjA2NjczODEwMThcIiwgXCJlbmRPZlJhbmdlXCI6IDUwMDB9LCB7XCJlbnRpdHlJZFwiOiBcIjIwNjgwOTMwNzU5XCIsIFwiZW5kT2ZSYW5nZVwiOiAxMDAwMH1dLCBcImZvcmNlZFZhcmlhdGlvbnNcIjoge1wiODMzNTZlMTcwNjZkMzM2ZDE4MDMwMjQxMzhlY2I2ODNcIjogXCJ0cmVhdG1lbnRcIiwgXCIxOGUzMWM4YTliMjI3MTMzMjQ2NjEzMzE2MmE0YWEwZFwiOiBcInRyZWF0bWVudFwiLCBcIjEwZjhhYjNmYmM1ZWJlOTg5YTM2YTA1Zjc5ZDQ4ZjMyXCI6IFwidHJlYXRtZW50XCIsIFwiMTY4NjA4OWY2ZDU0MGNkMmRlZWFlYzYwZWU0M2VjZjdcIjogXCJ0cmVhdG1lbnRcIn19LCB7XCJzdGF0dXNcIjogXCJSdW5uaW5nXCIsIFwiYXVkaWVuY2VJZHNcIjogW10sIFwidmFyaWF0aW9uc1wiOiBbe1widmFyaWFibGVzXCI6IFtdLCBcImlkXCI6IFwiMjE0Mjc5NTA5MDFcIiwgXCJrZXlcIjogXCJjb250cm9sXCJ9LCB7XCJ2YXJpYWJsZXNcIjogW10sIFwiaWRcIjogXCIyMTQyOTcxMDY2NVwiLCBcImtleVwiOiBcImJlZ2lubmVyXCJ9LCB7XCJ2YXJpYWJsZXNcIjogW10sIFwiaWRcIjogXCIyMTQzNzI5MTU0M1wiLCBcImtleVwiOiBcInVwc3RhcnRcIn1dLCBcImlkXCI6IFwiMjE0NDUwMzA3MDhcIiwgXCJrZXlcIjogXCJfMjU5X3plciIsCiAgICAgICAgICAgICJvZzp0aXRsZSI6ICJHaXRIdWIgLSBqcXVlbnNlL3l1cDogRGVhZCBzaW1wbGUgT2JqZWN0IHNjaGVtYSB2YWxpZGF0aW9uIiwKICAgICAgICAgICAgInZpc2l0b3ItaG1hYyI6ICJhYmVhYWNkZGM1YjllZDUyYTQ1ZDdkNzJiYTA2ZmFiNjRhNzNjYThmMDg0NjJmYWRhMGNhY2M0OWZhMDAzYjc2IiwKICAgICAgICAgICAgIm9nOmltYWdlOmhlaWdodCI6ICI2MDAiLAogICAgICAgICAgICAidHVyYm8tY2FjaGUtY29udHJvbCI6ICJuby1wcmV2aWV3IiwKICAgICAgICAgICAgInJlcXVlc3QtaWQiOiAiODgxRjo2NDE2OjFCOUREQzU6MkU4MjM4Mjo2MkM5MDJGOSIsCiAgICAgICAgICAgICJhbmFseXRpY3MtbG9jYXRpb24iOiAiL1x1MDAzY3VzZXItbmFtZVx1MDAzZS9cdTAwM2NyZXBvLW5hbWVcdTAwM2UiLAogICAgICAgICAgICAiY29sb3Itc2NoZW1lIjogImxpZ2h0IGRhcmsiLAogICAgICAgICAgICAib2N0b2x5dGljcy1kaW1lbnNpb24tcmVwb3NpdG9yeV9pc19mb3JrIjogImZhbHNlIiwKICAgICAgICAgICAgImdvLWltcG9ydCI6ICJnaXRodWIuY29tL2pxdWVuc2UveXVwIGdpdCBodHRwczovL2dpdGh1Yi5jb20vanF1ZW5zZS95dXAuZ2l0IiwKICAgICAgICAgICAgImJyb3dzZXItb3B0aW1pemVseS1jbGllbnQtZXJyb3JzLXVybCI6ICJodHRwczovL2FwaS5naXRodWIuY29tL19wcml2YXRlL2Jyb3dzZXIvb3B0aW1pemVseV9jbGllbnQvZXJyb3JzIiwKICAgICAgICAgICAgInR3aXR0ZXI6aW1hZ2U6c3JjIjogImh0dHBzOi8vb3BlbmdyYXBoLmdpdGh1YmFzc2V0cy5jb20vMGJhYmZhZjk1ZjQ3NWQ2OWYxMDUyYWE2MjlhOTJjZTVmMTdiNjI1ODRlMDQyZWZhYzk3MzI4MzUwMTQxNmU3YS9qcXVlbnNlL3l1cCIsCiAgICAgICAgICAgICJvY3RvbHl0aWNzLWRpbWVuc2lvbi11c2VyX2lkIjogIjMzOTI4NiIsCiAgICAgICAgICAgICJvY3RvbHl0aWNzLWRpbWVuc2lvbi1yZXBvc2l0b3J5X3B1YmxpYyI6ICJ0cnVlIiwKICAgICAgICAgICAgImZiOmFwcF9pZCI6ICIxNDAxNDg4NjkzNDM2NTI4IiwKICAgICAgICAgICAgIm9jdG9seXRpY3MtZGltZW5zaW9uLXJlcG9zaXRvcnlfbmV0d29ya19yb290X2lkIjogIjI0MzQ5ODMyIiwKICAgICAgICAgICAgIm9jdG9seXRpY3MtZGltZW5zaW9uLXJlcG9zaXRvcnlfbndvIjogImpxdWVuc2UveXVwIiwKICAgICAgICAgICAgInZpZXdwb3J0IjogIndpZHRoPWRldmljZS13aWR0aCIsCiAgICAgICAgICAgICJ0d2l0dGVyOmRlc2NyaXB0aW9uIjogIkRlYWQgc2ltcGxlIE9iamVjdCBzY2hlbWEgdmFsaWRhdGlvbi4gQ29udHJpYnV0ZSB0byBqcXVlbnNlL3l1cCBkZXZlbG9wbWVudCBieSBjcmVhdGluZyBhbiBhY2NvdW50IG9uIEdpdEh1Yi4iLAogICAgICAgICAgICAib2c6dXJsIjogImh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlbnNlL3l1cCIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJjc2VfaW1hZ2UiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cHM6Ly9vcGVuZ3JhcGguZ2l0aHViYXNzZXRzLmNvbS8wYmFiZmFmOTVmNDc1ZDY5ZjEwNTJhYTYyOWE5MmNlNWYxN2I2MjU4NGUwNDJlZmFjOTczMjgzNTAxNDE2ZTdhL2pxdWVuc2UveXVwIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiY3VzdG9tc2VhcmNoI3Jlc3VsdCIsCiAgICAgICJ0aXRsZSI6ICJWaXJ0dWFsIHN0cmluZyB0ZXN0IHwgQmFrZXIgSHVnaGVzIiwKICAgICAgImh0bWxUaXRsZSI6ICJWaXJ0dWFsIFx1MDAzY2JcdTAwM2VzdHJpbmcgdGVzdFx1MDAzYy9iXHUwMDNlIHwgQmFrZXIgSHVnaGVzIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly93d3cuYmFrZXJodWdoZXMuY29tL3JlbW90ZS1kaWdpdGFsLXNvbHV0aW9ucy92aXJ0dWFsLXN0cmluZy10ZXN0IiwKICAgICAgImRpc3BsYXlMaW5rIjogInd3dy5iYWtlcmh1Z2hlcy5jb20iLAogICAgICAic25pcHBldCI6ICJBIHN0cmluZyB0ZXN0IGlzIGEgbWFqb3IgcHJvamVjdCBtaWxlc3RvbmUgcGVyZm9ybWVkIG9uIHRoZSBmaXJzdCBmdWxsIHNldCBvZiBlcXVpcG1lbnQuIEl0J3MgdGhlIG9ubHkgd2F5IHRvIHJlcGxpY2F0ZSBhbmQgc2ltdWxhdGUgc2l0ZSBvcGVyYXRpbmfCoC4uLiIsCiAgICAgICJodG1sU25pcHBldCI6ICJBIFx1MDAzY2JcdTAwM2VzdHJpbmcgdGVzdFx1MDAzYy9iXHUwMDNlIGlzIGEgbWFqb3IgcHJvamVjdCBtaWxlc3RvbmUgcGVyZm9ybWVkIG9uIHRoZSBmaXJzdCBmdWxsIHNldCBvZiBlcXVpcG1lbnQuIEl0JiMzOTtzIHRoZSBvbmx5IHdheSB0byByZXBsaWNhdGUgYW5kIHNpbXVsYXRlIHNpdGUgb3BlcmF0aW5nJm5ic3A7Li4uIiwKICAgICAgImNhY2hlSWQiOiAidnFHSk1JSFhxY1lKIiwKICAgICAgImZvcm1hdHRlZFVybCI6ICJodHRwczovL3d3dy5iYWtlcmh1Z2hlcy5jb20vcmVtb3RlLWRpZ2l0YWwtc29sdXRpb25zL3ZpcnR1YWwtc3RyaW5nLXRlc3QiLAogICAgICAiaHRtbEZvcm1hdHRlZFVybCI6ICJodHRwczovL3d3dy5iYWtlcmh1Z2hlcy5jb20vcmVtb3RlLWRpZ2l0YWwtc29sdXRpb25zL3ZpcnR1YWwtXHUwMDNjYlx1MDAzZXN0cmluZ1x1MDAzYy9iXHUwMDNlLVx1MDAzY2JcdTAwM2V0ZXN0XHUwMDNjL2JcdTAwM2UiLAogICAgICAicGFnZW1hcCI6IHsKICAgICAgICAiY3NlX3RodW1ibmFpbCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL2VuY3J5cHRlZC10Ym4xLmdzdGF0aWMuY29tL2ltYWdlcz9xPXRibjpBTmQ5R2NRS0Q1RV9HQV9VdXp1ZjN5UGdVQTdLQm1mZFRSQm8xemJmTGlIUWpBbjhEY3UwNkdRa291R1JGaWUtIiwKICAgICAgICAgICAgIndpZHRoIjogIjI1OSIsCiAgICAgICAgICAgICJoZWlnaHQiOiAiMTk0IgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgIm1ldGF0YWdzIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaGFuZGhlbGRmcmllbmRseSI6ICJ0cnVlIiwKICAgICAgICAgICAgInZpZXdwb3J0IjogIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiLAogICAgICAgICAgICAibW9iaWxlb3B0aW1pemVkIjogIndpZHRoIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImNzZV9pbWFnZSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL3d3dy5iYWtlcmh1Z2hlcy5jb20vc2l0ZXMvYmFrZXJodWdoZXMvZmlsZXMvc3R5bGVzL3Byb2R1Y3RfaGVyby9wdWJsaWMvMjAyMC0wNS9zaHV0dGVyc3RvY2tfMTEzNjAwMDEyMC0wNTI5MjAuanBnP2l0b2s9bE00SWFPaDgiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgICAgInRpdGxlIjogIlVzZSBvZiBFc29waGFnZWFsIFN0cmluZyBUZXN0IHRvIFVuZGVyc3RhbmQgU3ltcHRvbXMgLi4uIiwKICAgICAgImh0bWxUaXRsZSI6ICJVc2Ugb2YgRXNvcGhhZ2VhbCBcdTAwM2NiXHUwMDNlU3RyaW5nIFRlc3RcdTAwM2MvYlx1MDAzZSB0byBVbmRlcnN0YW5kIFN5bXB0b21zIC4uLiIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vY2xpbmljYWx0cmlhbHMuZ292L2N0Mi9zaG93L05DVDAzMzA1NjUzIiwKICAgICAgImRpc3BsYXlMaW5rIjogImNsaW5pY2FsdHJpYWxzLmdvdiIsCiAgICAgICJzbmlwcGV0IjogIlVzZSBvZiBFc29waGFnZWFsIFN0cmluZyBUZXN0IHRvIFVuZGVyc3RhbmQgU3ltcHRvbXMsIEluZmxhbW1hdGlvbiwgYW5kIEZ1bmN0aW9uIGluIEVvc2lub3BoaWxpYyBFc29waGFnaXRpcy4gVGhlIHNhZmV0eSBhbmQgc2NpZW50aWZpYyB2YWxpZGl0eSBvZiB0aGlzwqAuLi4iLAogICAgICAiaHRtbFNuaXBwZXQiOiAiVXNlIG9mIEVzb3BoYWdlYWwgXHUwMDNjYlx1MDAzZVN0cmluZyBUZXN0XHUwMDNjL2JcdTAwM2UgdG8gVW5kZXJzdGFuZCBTeW1wdG9tcywgSW5mbGFtbWF0aW9uLCBhbmQgRnVuY3Rpb24gaW4gRW9zaW5vcGhpbGljIEVzb3BoYWdpdGlzLiBUaGUgc2FmZXR5IGFuZCBzY2llbnRpZmljIHZhbGlkaXR5IG9mIHRoaXMmbmJzcDsuLi4iLAogICAgICAiY2FjaGVJZCI6ICJVcjFrTnZrWUVsb0oiLAogICAgICAiZm9ybWF0dGVkVXJsIjogImh0dHBzOi8vY2xpbmljYWx0cmlhbHMuZ292L2N0Mi9zaG93L05DVDAzMzA1NjUzIiwKICAgICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAiaHR0cHM6Ly9jbGluaWNhbHRyaWFscy5nb3YvY3QyL3Nob3cvTkNUMDMzMDU2NTMiLAogICAgICAicGFnZW1hcCI6IHsKICAgICAgICAiY3NlX3RodW1ibmFpbCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL2VuY3J5cHRlZC10Ym4xLmdzdGF0aWMuY29tL2ltYWdlcz9xPXRibjpBTmQ5R2NRQXhlWnZ1S2NpckRFNUExMVViXzRFUk5iamoxMEFMbFNEWG9KTy1QZEJDVllwSzZVZTc1TURMZWMiLAogICAgICAgICAgICAid2lkdGgiOiAiMjI1IiwKICAgICAgICAgICAgImhlaWdodCI6ICIyMjUiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAibWV0YXRhZ3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJvZzppbWFnZSI6ICJodHRwczovL2NsaW5pY2FsdHJpYWxzLmdvdi9jdDIvaHRtbC9pbWFnZXMvY3QuZ292LW5sbS1uaWgtc3F1YXJlLWxvZ28ucG5nP3YxIiwKICAgICAgICAgICAgInR3aXR0ZXI6Y2FyZCI6ICJzdW1tYXJ5IiwKICAgICAgICAgICAgIm9nOnR5cGUiOiAiYXJ0aWNsZSIsCiAgICAgICAgICAgICJvZzp0aXRsZSI6ICJVc2Ugb2YgRXNvcGhhZ2VhbCBTdHJpbmcgVGVzdCB0byBVbmRlcnN0YW5kIFN5bXB0b21zLCBJbmZsYW1tYXRpb24sIGFuZCBGdW5jdGlvbiBpbiBFb3Npbm9waGlsaWMgRXNvcGhhZ2l0aXMgLSBGdWxsIFRleHQgVmlldyAtIENsaW5pY2FsVHJpYWxzLmdvdiIsCiAgICAgICAgICAgICJuY2JpX2FwcCI6ICJjdGdvdiIsCiAgICAgICAgICAgICJuY2JpX3BkaWQiOiAic2hvd19zdHVkeSIsCiAgICAgICAgICAgICJuY2JpX3BjaWQiOiAiTkNUMDMzMDU2NTMiLAogICAgICAgICAgICAib2c6ZGVzY3JpcHRpb24iOiAiVXNlIG9mIEVzb3BoYWdlYWwgU3RyaW5nIFRlc3QgdG8gVW5kZXJzdGFuZCBTeW1wdG9tcywgSW5mbGFtbWF0aW9uLCBhbmQgRnVuY3Rpb24gaW4gRW9zaW5vcGhpbGljIEVzb3BoYWdpdGlzIC0gRnVsbCBUZXh0IFZpZXcuIiwKICAgICAgICAgICAgInR3aXR0ZXI6aW1hZ2UiOiAiaHR0cHM6Ly9jbGluaWNhbHRyaWFscy5nb3YvY3QyL2h0bWwvaW1hZ2VzL2N0Lmdvdi1ubG0tbmloLXNxdWFyZS1sb2dvLnBuZz92MSIsCiAgICAgICAgICAgICJuY2JpX2N0cmVxaWQiOiAiUjk4MEp2MmEiLAogICAgICAgICAgICAibmNiaV9jdGhvc3QiOiAidzEzIiwKICAgICAgICAgICAgInJlZmVycmVyIjogIm9yaWdpbi13aGVuLWNyb3NzLW9yaWdpbiIsCiAgICAgICAgICAgICJuY2JpX3NpZCI6ICI0ZWM4YTYxNTJjMzAyYTg2XzQ4NzBlY1NJRCIsCiAgICAgICAgICAgICJuY2JpX2RiIjogImN0Z292IiwKICAgICAgICAgICAgInZpZXdwb3J0IjogIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIiwKICAgICAgICAgICAgIm5jYmlfY3RzZXNzaWQiOiAiUzk4MEludzUiLAogICAgICAgICAgICAibmNiaV9jdGlwaWQiOiAiSWNWMk5CYzgiLAogICAgICAgICAgICAib2c6dXJsIjogImh0dHBzOi8vY2xpbmljYWx0cmlhbHMuZ292L2N0Mi9zaG93L05DVDAzMzA1NjUzIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImNzZV9pbWFnZSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL2NsaW5pY2FsdHJpYWxzLmdvdi9jdDIvaHRtbC9pbWFnZXMvY3QuZ292LW5sbS1uaWgtc3F1YXJlLWxvZ28ucG5nP3YxIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiY3VzdG9tc2VhcmNoI3Jlc3VsdCIsCiAgICAgICJ0aXRsZSI6ICJUZXN0aW5nIEhUVFAvSFRUUFMgTW9uaXRvciBTZW5kIFN0cmluZyB1c2luZyBvcGVuc3NsIHNfY2xpZW50IC4uLiIsCiAgICAgICJodG1sVGl0bGUiOiAiXHUwMDNjYlx1MDAzZVRlc3RpbmdcdTAwM2MvYlx1MDAzZSBIVFRQL0hUVFBTIE1vbml0b3IgU2VuZCBcdTAwM2NiXHUwMDNlU3RyaW5nXHUwMDNjL2JcdTAwM2UgdXNpbmcgb3BlbnNzbCBzX2NsaWVudCAuLi4iLAogICAgICAibGluayI6ICJodHRwczovL3N1cHBvcnQuZjUuY29tL2NzcC9hcnRpY2xlL0s4MTIzOTAyNCIsCiAgICAgICJkaXNwbGF5TGluayI6ICJzdXBwb3J0LmY1LmNvbSIsCiAgICAgICJzbmlwcGV0IjogIkF1ZyAxMCwgMjAyMCAuLi4gV2hlbiB0ZXN0aW5nIHRoZSB2YWxpZGl0eSBvZiBhbiBIVFRQIG9yIEhUVFBTIE1vbml0b3IgU2VuZCBzdHJpbmcsIHVzaW5nIGNvbW1hbmRzIHN1Y2ggYXMgY3VybCBvciB3Z2V0IGFkZCBhZGRpdGlvbmFsIEhUVFAgSGVhZGVycywgc3VjaCBhcyBVc2VywqAuLi4iLAogICAgICAiaHRtbFNuaXBwZXQiOiAiQXVnIDEwLCAyMDIwIFx1MDAzY2JcdTAwM2UuLi5cdTAwM2MvYlx1MDAzZSBXaGVuIFx1MDAzY2JcdTAwM2V0ZXN0aW5nXHUwMDNjL2JcdTAwM2UgdGhlIHZhbGlkaXR5IG9mIGFuIEhUVFAgb3IgSFRUUFMgTW9uaXRvciBTZW5kIFx1MDAzY2JcdTAwM2VzdHJpbmdcdTAwM2MvYlx1MDAzZSwgdXNpbmcgY29tbWFuZHMgc3VjaCBhcyBjdXJsIG9yIHdnZXQgYWRkIGFkZGl0aW9uYWwgSFRUUCBIZWFkZXJzLCBzdWNoIGFzIFVzZXImbmJzcDsuLi4iLAogICAgICAiY2FjaGVJZCI6ICJpY1JjOUFPZGNNZ0oiLAogICAgICAiZm9ybWF0dGVkVXJsIjogImh0dHBzOi8vc3VwcG9ydC5mNS5jb20vY3NwL2FydGljbGUvSzgxMjM5MDI0IiwKICAgICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAiaHR0cHM6Ly9zdXBwb3J0LmY1LmNvbS9jc3AvYXJ0aWNsZS9LODEyMzkwMjQiLAogICAgICAicGFnZW1hcCI6IHsKICAgICAgICAibWV0YXRhZ3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJvZzp0eXBlIjogIndlYnNpdGUiLAogICAgICAgICAgICAidmlld3BvcnQiOiAid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCIsCiAgICAgICAgICAgICJvZzp0aXRsZSI6ICJUZXN0aW5nIEhUVFAvSFRUUFMgTW9uaXRvciBTZW5kIFN0cmluZyB1c2luZyBvcGVuc3NsIHNfY2xpZW50IGFuZCBuZXRjYXQgKG5jKSIsCiAgICAgICAgICAgICJvZzp1cmwiOiAiaHR0cHM6Ly9zdXBwb3J0LmY1LmNvbS9jc3AvYXJ0aWNsZS9LODEyMzkwMjQiLAogICAgICAgICAgICAib2c6ZGVzY3JpcHRpb24iOiAiVGVzdGluZyBIVFRQL0hUVFBTIE1vbml0b3IgU2VuZCBTdHJpbmcgdXNpbmcgb3BlbnNzbCBzX2NsaWVudCBhbmQgbmV0Y2F0IChuYykiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgICAgInRpdGxlIjogIlN0cmluZyBWYWx1ZSBUZXN0IFN0ZXAgLSBOSSIsCiAgICAgICJodG1sVGl0bGUiOiAiXHUwMDNjYlx1MDAzZVN0cmluZ1x1MDAzYy9iXHUwMDNlIFZhbHVlIFx1MDAzY2JcdTAwM2VUZXN0XHUwMDNjL2JcdTAwM2UgU3RlcCAtIE5JIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly93d3cubmkuY29tL2RvY3MvZW4tVVMvYnVuZGxlL3Rlc3RzdGFuZC0yMDIxL3BhZ2UvdHNyZWYvaW5mb3RvcGljcy90ZXN0X3N0ZXBfdHlwZXNfc3ZfdGVzdC5odG0iLAogICAgICAiZGlzcGxheUxpbmsiOiAid3d3Lm5pLmNvbSIsCiAgICAgICJzbmlwcGV0IjogIkFwciAzMCwgMjAyMiAuLi4gVGhlIFN0cmluZyBWYWx1ZSBUZXN0IHN0ZXAgY2FsbHMgYSBjb2RlIG1vZHVsZSB0aGF0IHJldHVybnMgYSBzdHJpbmcgdmFsdWUuIiwKICAgICAgImh0bWxTbmlwcGV0IjogIkFwciAzMCwgMjAyMiBcdTAwM2NiXHUwMDNlLi4uXHUwMDNjL2JcdTAwM2UgVGhlIFx1MDAzY2JcdTAwM2VTdHJpbmdcdTAwM2MvYlx1MDAzZSBWYWx1ZSBcdTAwM2NiXHUwMDNlVGVzdFx1MDAzYy9iXHUwMDNlIHN0ZXAgY2FsbHMgYSBjb2RlIG1vZHVsZSB0aGF0IHJldHVybnMgYSBcdTAwM2NiXHUwMDNlc3RyaW5nXHUwMDNjL2JcdTAwM2UgdmFsdWUuIiwKICAgICAgImNhY2hlSWQiOiAiUzlqRzM3NHUyOVlKIiwKICAgICAgImZvcm1hdHRlZFVybCI6ICJodHRwczovL3d3dy5uaS5jb20vZG9jcy9lbi1VUy8uLi4vdGVzdHN0YW5kLi4uL3Rlc3Rfc3RlcF90eXBlc19zdl90ZXN0Lmh0bSIsCiAgICAgICJodG1sRm9ybWF0dGVkVXJsIjogImh0dHBzOi8vd3d3Lm5pLmNvbS9kb2NzL2VuLVVTLy4uLi9cdTAwM2NiXHUwMDNldGVzdHNcdTAwM2MvYlx1MDAzZXRhbmQuLi4vXHUwMDNjYlx1MDAzZXRlc3RcdTAwM2MvYlx1MDAzZV9zdGVwX3R5cGVzX3N2X1x1MDAzY2JcdTAwM2V0ZXN0XHUwMDNjL2JcdTAwM2UuaHRtIiwKICAgICAgInBhZ2VtYXAiOiB7CiAgICAgICAgImNzZV90aHVtYm5haWwiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cHM6Ly9lbmNyeXB0ZWQtdGJuMC5nc3RhdGljLmNvbS9pbWFnZXM/cT10Ym46QU5kOUdjU3lPRUZrV1hMWmNEX2c4SGpjbUVDOHV3ZU9CZVE3UG5wd0lqcmh2ZGZFYS1BZlJBY2hfcXpHSFlhYSIsCiAgICAgICAgICAgICJ3aWR0aCI6ICIzMTciLAogICAgICAgICAgICAiaGVpZ2h0IjogIjE1OSIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJtZXRhdGFncyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInBhZ2V0eXBlIjogImxlYWYiLAogICAgICAgICAgICAiZ3VpZGVuYW1lIjogIlRlc3RTdGFuZCBIZWxwIiwKICAgICAgICAgICAgIm9nOmltYWdlIjogImh0dHBzOi8vbmkuc2NlbmU3LmNvbS9pcy9pbWFnZS9uaS9sb2dvXzIwMjA/d2lkPTQ1MCIsCiAgICAgICAgICAgICJvZzp0eXBlIjogImFydGljbGUiLAogICAgICAgICAgICAiZGVsaXZlcmVkYnkiOiAiRHluYW1pY0RlbGl2ZXJ5IiwKICAgICAgICAgICAgInByb2R1Y3RjYXRlZ29yaWVzIjogIjM3NTIzOCIsCiAgICAgICAgICAgICJ3cmFwcGVyaWQiOiAid3JhcHBlci1kZXNpZ24tb25seSIsCiAgICAgICAgICAgICJzaG9ydHRpdGxlIjogIlN0cmluZyBWYWx1ZSBUZXN0IFN0ZXAiLAogICAgICAgICAgICAib2c6dGl0bGUiOiAiU3RyaW5nIFZhbHVlIFRlc3QgU3RlcCAtIE5JIiwKICAgICAgICAgICAgInNlY3Rpb24iOiAic3VwcG9ydCIsCiAgICAgICAgICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAgICAgICAgICJ3cmFwcGVyIjogInllcyIsCiAgICAgICAgICAgICJvZzpkZXNjcmlwdGlvbiI6ICJUaGUgU3RyaW5nIFZhbHVlIFRlc3Qgc3RlcCBjYWxscyBhIGNvZGUgbW9kdWxlIHRoYXQgcmV0dXJucyBhIHN0cmluZyB2YWx1ZS4iLAogICAgICAgICAgICAiY29udGVudHR5cGUiOiAiZmVhdHVyZSIsCiAgICAgICAgICAgICJjZi1zZWFyY2gtYm90IjogInRydWUiLAogICAgICAgICAgICAibWluaS10b2MiOiAieWVzIiwKICAgICAgICAgICAgInVwZGF0ZWRhdGUiOiAiMjAyMi0wNC0zMCIsCiAgICAgICAgICAgICJ2aWV3cG9ydCI6ICJ3aWR0aD1kZXZpY2Utd2lkdGgsaW5pdGlhbC1zY2FsZT0xLHNocmluay10by1maXQ9bm8iLAogICAgICAgICAgICAiY2Y6Y291bnRyeSI6ICJVUyIsCiAgICAgICAgICAgICJkb2N1bWVudGlkIjogInRlc3RzdGFuZC0yMDIxIiwKICAgICAgICAgICAgImRvY3N0YXR1cyI6ICJjdXJyZW50IiwKICAgICAgICAgICAgImxhc3Rtb2QiOiAiMjAyMi0wNC0zMCIsCiAgICAgICAgICAgICJsaWtlcyI6ICIwIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImNzZV9pbWFnZSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL25pLnNjZW5lNy5jb20vaXMvaW1hZ2UvbmkvbG9nb18yMDIwP3dpZD00NTAiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgICAgInRpdGxlIjogIkVJQ0FSIHRlc3QgZmlsZSAtIFdpa2lwZWRpYSIsCiAgICAgICJodG1sVGl0bGUiOiAiRUlDQVIgXHUwMDNjYlx1MDAzZXRlc3RcdTAwM2MvYlx1MDAzZSBmaWxlIC0gV2lraXBlZGlhIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRUlDQVJfdGVzdF9maWxlIiwKICAgICAgImRpc3BsYXlMaW5rIjogImVuLndpa2lwZWRpYS5vcmciLAogICAgICAic25pcHBldCI6ICJBbnRpLXZpcnVzIHByb2dyYW1tZXJzIHNldCB0aGUgRUlDQVIgc3RyaW5nIGFzIGEgdmVyaWZpZWQgdmlydXMsIHNpbWlsYXIgdG8gb3RoZXIgaWRlbnRpZmllZCBzaWduYXR1cmVzLiBBIGNvbXBsaWFudCB2aXJ1cyBzY2FubmVyLCB3aGVuIGRldGVjdGluZyB0aGUgZmlsZSzCoC4uLiIsCiAgICAgICJodG1sU25pcHBldCI6ICJBbnRpLXZpcnVzIHByb2dyYW1tZXJzIHNldCB0aGUgRUlDQVIgXHUwMDNjYlx1MDAzZXN0cmluZ1x1MDAzYy9iXHUwMDNlIGFzIGEgdmVyaWZpZWQgdmlydXMsIHNpbWlsYXIgdG8gb3RoZXIgaWRlbnRpZmllZCBzaWduYXR1cmVzLiBBIGNvbXBsaWFudCB2aXJ1cyBzY2FubmVyLCB3aGVuIGRldGVjdGluZyB0aGUgZmlsZSwmbmJzcDsuLi4iLAogICAgICAiY2FjaGVJZCI6ICI3VjFjajcyVnBOSUoiLAogICAgICAiZm9ybWF0dGVkVXJsIjogImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VJQ0FSX3Rlc3RfZmlsZSIsCiAgICAgICJodG1sRm9ybWF0dGVkVXJsIjogImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VJQ0FSX1x1MDAzY2JcdTAwM2V0ZXN0XHUwMDNjL2JcdTAwM2VfZmlsZSIsCiAgICAgICJwYWdlbWFwIjogewogICAgICAgICJjc2VfdGh1bWJuYWlsIjogWwogICAgICAgICAgewogICAgICAgICAgICAic3JjIjogImh0dHBzOi8vZW5jcnlwdGVkLXRibjAuZ3N0YXRpYy5jb20vaW1hZ2VzP3E9dGJuOkFOZDlHY1JHNkRNSjZybzlUYkhEV2IxLUctODJLWVdWdlpVbzN5UTdpTjFnQlhvbmYyOWJuUnAySm9hQTVpayIsCiAgICAgICAgICAgICJ3aWR0aCI6ICIyMjUiLAogICAgICAgICAgICAiaGVpZ2h0IjogIjIyNSIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJtZXRhdGFncyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInJlZmVycmVyIjogIm9yaWdpbiIsCiAgICAgICAgICAgICJvZzppbWFnZSI6ICJodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iL2MvYzUvQ0lBSk1LMTIwOS1lbi5zdmcvMTIwMHB4LUNJQUpNSzEyMDktZW4uc3ZnLnBuZyIsCiAgICAgICAgICAgICJ0aGVtZS1jb2xvciI6ICIjZWFlY2YwIiwKICAgICAgICAgICAgIm9nOmltYWdlOndpZHRoIjogIjEyMDAiLAogICAgICAgICAgICAib2c6dHlwZSI6ICJ3ZWJzaXRlIiwKICAgICAgICAgICAgInZpZXdwb3J0IjogIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIHVzZXItc2NhbGFibGU9eWVzLCBtaW5pbXVtLXNjYWxlPTAuMjUsIG1heGltdW0tc2NhbGU9NS4wIiwKICAgICAgICAgICAgIm9nOnRpdGxlIjogIkVJQ0FSIHRlc3QgZmlsZSAtIFdpa2lwZWRpYSIsCiAgICAgICAgICAgICJvZzppbWFnZTpoZWlnaHQiOiAiMTIwMCIsCiAgICAgICAgICAgICJmb3JtYXQtZGV0ZWN0aW9uIjogInRlbGVwaG9uZT1ubyIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJjc2VfaW1hZ2UiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi9jL2M1L0NJQUpNSzEyMDktZW4uc3ZnLzEyMDBweC1DSUFKTUsxMjA5LWVuLnN2Zy5wbmciCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgICAgInRpdGxlIjogIldpbGwgU3RyaW5nIFRoZW9yeSBGaW5hbGx5IEJlIFB1dCB0byB0aGUgRXhwZXJpbWVudGFsIFRlc3QgLi4uIiwKICAgICAgImh0bWxUaXRsZSI6ICJXaWxsIFx1MDAzY2JcdTAwM2VTdHJpbmdcdTAwM2MvYlx1MDAzZSBUaGVvcnkgRmluYWxseSBCZSBQdXQgdG8gdGhlIEV4cGVyaW1lbnRhbCBcdTAwM2NiXHUwMDNlVGVzdFx1MDAzYy9iXHUwMDNlIC4uLiIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vd3d3LnNjaWVudGlmaWNhbWVyaWNhbi5jb20vYXJ0aWNsZS93aWxsLXN0cmluZy10aGVvcnktZmluYWxseS1iZS1wdXQtdG8tdGhlLWV4cGVyaW1lbnRhbC10ZXN0LyIsCiAgICAgICJkaXNwbGF5TGluayI6ICJ3d3cuc2NpZW50aWZpY2FtZXJpY2FuLmNvbSIsCiAgICAgICJzbmlwcGV0IjogIk1hciAyNSwgMjAyMCAuLi4gTWFueSBwaHlzaWNpc3RzIGNvbnNpZGVyIHN0cmluZyB0aGVvcnkgb3VyIGJlc3QgaG9wZSBmb3IgY29tYmluaW5nIHF1YW50dW0gcGh5c2ljcyBhbmQgZ3Jhdml0eSBpbnRvIGEgdW5pZmllZCB0aGVvcnkgb2YgZXZlcnl0aGluZy4iLAogICAgICAiaHRtbFNuaXBwZXQiOiAiTWFyIDI1LCAyMDIwIFx1MDAzY2JcdTAwM2UuLi5cdTAwM2MvYlx1MDAzZSBNYW55IHBoeXNpY2lzdHMgY29uc2lkZXIgXHUwMDNjYlx1MDAzZXN0cmluZ1x1MDAzYy9iXHUwMDNlIHRoZW9yeSBvdXIgYmVzdCBob3BlIGZvciBjb21iaW5pbmcgcXVhbnR1bSBwaHlzaWNzIGFuZCBncmF2aXR5IGludG8gYSB1bmlmaWVkIHRoZW9yeSBvZiBldmVyeXRoaW5nLiIsCiAgICAgICJjYWNoZUlkIjogImhmelNONi1LT3BjSiIsCiAgICAgICJmb3JtYXR0ZWRVcmwiOiAiaHR0cHM6Ly93d3cuc2NpZW50aWZpY2FtZXJpY2FuLmNvbS8uLi4vd2lsbC1zdHJpbmctdGhlb3J5LWZpbmFsbHktYmUtcHV0LXRvLXRoZSAtZXhwZXJpbWVudGFsLXRlc3QvIiwKICAgICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAiaHR0cHM6Ly93d3cuc2NpZW50aWZpY2FtZXJpY2FuLmNvbS8uLi4vd2lsbC1cdTAwM2NiXHUwMDNlc3RyaW5nXHUwMDNjL2JcdTAwM2UtdGhlb3J5LWZpbmFsbHktYmUtcHV0LXRvLXRoZSAtZXhwZXJpbWVudGFsLVx1MDAzY2JcdTAwM2V0ZXN0XHUwMDNjL2JcdTAwM2UvIiwKICAgICAgInBhZ2VtYXAiOiB7CiAgICAgICAgImNzZV90aHVtYm5haWwiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cHM6Ly9lbmNyeXB0ZWQtdGJuMS5nc3RhdGljLmNvbS9pbWFnZXM/cT10Ym46QU5kOUdjUmQxT0t5eC1ITXJ4cXJXREJ6cEU3SVdZckZxamcxZG9XNEx5MDNTY3loOXVkbm1pV1VDalVXSFdxQSIsCiAgICAgICAgICAgICJ3aWR0aCI6ICIyODMiLAogICAgICAgICAgICAiaGVpZ2h0IjogIjE3OCIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJpbWFnZW9iamVjdCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL3N0YXRpYy5zY2llbnRpZmljYW1lcmljYW4uY29tL3NjaWFtL2Fzc2V0cy9JbWFnZS9uZXdzbGV0dGVyL3NhbG9nby5wbmciCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiY2FwdGlvbiI6ICJDcmVkaXQ6IFBhc2lla2EgR2V0dHkgSW1hZ2VzIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNyZWRpdDogUGFzaWVrYSBHZXR0eSBJbWFnZXMiLAogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vc3RhdGljLnNjaWVudGlmaWNhbWVyaWNhbi5jb20vc2NpYW0vY2FjaGUvZmlsZS8zQUMwN0RCMC1DNTc3LTQ3MUEtQkRDRTZCOThGMDU0QkVEMV9zb3VyY2UuanBnP3c9NTkwJmg9ODAwJjQ0NkIxNzk5LUNFNDEtNDI3Mi04Q0JFQjIwQTJBMTFDMTRCIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBlcnNvbiI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiQnJlbmRhbiBaLiBGb3N0ZXIiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAib3JnYW5pemF0aW9uIjogWwogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJTY2llbnRpZmljIEFtZXJpY2FuIiwKICAgICAgICAgICAgInVybCI6ICJTY2llbnRpZmljIEFtZXJpY2FuIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgIm1ldGF0YWdzIjogWwogICAgICAgICAgewogICAgICAgICAgICAib2c6aW1hZ2UiOiAiaHR0cHM6Ly9zdGF0aWMuc2NpZW50aWZpY2FtZXJpY2FuLmNvbS9zY2lhbS9jYWNoZS9maWxlLzNBQzA3REIwLUM1NzctNDcxQS1CRENFNkI5OEYwNTRCRUQxLmpwZyIsCiAgICAgICAgICAgICJ0aGVtZS1jb2xvciI6ICIjMDkzOTY5IiwKICAgICAgICAgICAgIm9nOnR5cGUiOiAiYXJ0aWNsZSIsCiAgICAgICAgICAgICJvZzppbWFnZTp3aWR0aCI6ICI3OTAiLAogICAgICAgICAgICAidHdpdHRlcjpjYXJkIjogInN1bW1hcnlfbGFyZ2VfaW1hZ2UiLAogICAgICAgICAgICAidHdpdHRlcjp0aXRsZSI6ICJXaWxsIFN0cmluZyBUaGVvcnkgRmluYWxseSBCZSBQdXQgdG8gdGhlIEV4cGVyaW1lbnRhbCBUZXN0PyIsCiAgICAgICAgICAgICJvZzpzaXRlX25hbWUiOiAiU2NpZW50aWZpYyBBbWVyaWNhbiIsCiAgICAgICAgICAgICJhdXRob3IiOiAiQnJlbmRhbiBaLiBGb3N0ZXIiLAogICAgICAgICAgICAib2c6dGl0bGUiOiAiV2lsbCBTdHJpbmcgVGhlb3J5IEZpbmFsbHkgQmUgUHV0IHRvIHRoZSBFeHBlcmltZW50YWwgVGVzdD8iLAogICAgICAgICAgICAib2c6aW1hZ2U6aGVpZ2h0IjogIjQ5NiIsCiAgICAgICAgICAgICJtc2FwcGxpY2F0aW9uLXRpbGVpbWFnZSI6ICIvcHVibGljL3Jlc291cmNlcy9mYXZpY29ucy9mYXZpY29uLTE5Ni1mMTAzOTViYTdlY2YwNzc1NmU0YjVhODJjNDc5NWI2MS5wbmciLAogICAgICAgICAgICAib2c6ZGVzY3JpcHRpb24iOiAiUGh5c2ljaXN0cyBoYXZlIGZvdW5kIGEgd2F5IHRoZSB0aGVvcnkgbWlnaHQgbGltaXQgdGhlIGNvc21pYyBpbmZsYXRpb24gdGhhdCBpcyB0aG91Z2h0IHRvIGhhdmUgZXhwYW5kZWQgdGhlIGVhcmx5IHVuaXZlcnNlIiwKICAgICAgICAgICAgImZiOnBhZ2VzIjogIjM0MDcwNDk0OTI5MzMzMiIsCiAgICAgICAgICAgICJyZWZlcnJlciI6ICJ1bnNhZmUtdXJsIiwKICAgICAgICAgICAgInR3aXR0ZXI6c2l0ZSI6ICJAc2NpYW0iLAogICAgICAgICAgICAidmlld3BvcnQiOiAid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIHNocmluay10by1maXQ9bm8iLAogICAgICAgICAgICAiY29tLnNpbHZlcnBvcC5icmFuZGVkZG9tYWlucyI6ICJ3d3cucGFnZXMwNC5uZXQsd3d3LnNjaWVudGlmaWNhbWVyaWNhbi5jb20iLAogICAgICAgICAgICAib2c6dXJsIjogImh0dHBzOi8vd3d3LnNjaWVudGlmaWNhbWVyaWNhbi5jb20vYXJ0aWNsZS93aWxsLXN0cmluZy10aGVvcnktZmluYWxseS1iZS1wdXQtdG8tdGhlLWV4cGVyaW1lbnRhbC10ZXN0LyIsCiAgICAgICAgICAgICJjb20uc2lsdmVycG9wLmNvdGhvc3QiOiAicG9kNC5pYm1tYXJrZXRpbmdjbG91ZC5jb20iCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiY3NlX2ltYWdlIjogWwogICAgICAgICAgewogICAgICAgICAgICAic3JjIjogImh0dHBzOi8vc3RhdGljLnNjaWVudGlmaWNhbWVyaWNhbi5jb20vc2NpYW0vY2FjaGUvZmlsZS8zQUMwN0RCMC1DNTc3LTQ3MUEtQkRDRTZCOThGMDU0QkVEMS5qcGciCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiYXJ0aWNsZSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImltYWdlIjogImh0dHBzOi8vc3RhdGljLnNjaWVudGlmaWNhbWVyaWNhbi5jb20vc2NpYW0vY2FjaGUvZmlsZS8zQUMwN0RCMC1DNTc3LTQ3MUEtQkRDRTZCOThGMDU0QkVEMS5qcGciLAogICAgICAgICAgICAiYXJ0aWNsZWJvZHkiOiAiTWFueSBwaHlzaWNpc3RzIGNvbnNpZGVyIHN0cmluZyB0aGVvcnkgb3VyIGJlc3QgaG9wZSBmb3IgY29tYmluaW5nIHF1YW50dW0gcGh5c2ljcyBhbmQgZ3Jhdml0eSBpbnRvIGEgdW5pZmllZCB0aGVvcnkgb2YgZXZlcnl0aGluZy4gWWV0IGEgY29udHJhcnkgb3BpbmlvbiBpcyB0aGF0IHRoZSBjb25jZXB0IGlzIHByYWN0aWNhbGx5Li4uIiwKICAgICAgICAgICAgImFydGljbGVzZWN0aW9uIjogIlF1YW50dW0gUGh5c2ljcyIsCiAgICAgICAgICAgICJoZWFkbGluZSI6ICJXaWxsIFN0cmluZyBUaGVvcnkgRmluYWxseSBCZSBQdXQgdG8gdGhlIEV4cGVyaW1lbnRhbCBUZXN0PyIsCiAgICAgICAgICAgICJkYXRlcHVibGlzaGVkIjogIk1hcmNoIDI1LCAyMDIwIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfQogIF0KfQo=
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:28:47 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=test%20string&start=31
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:28:48 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:28:48 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=test%20string&start=41
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:28:49 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:28:49 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=test%20string&start=51
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:28:49 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:28:49 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=test%20string&start=61
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:28:50 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:28:50 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=test%20string&start=71
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:28:51 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:28:51 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=test%20string&start=81
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:28:51 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:28:51 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=test%20string&start=91
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:28:52 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:28:52 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=test%20string&start=101
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 400
      message: Bad Request
    headers:
      Vary:
      - Origin
      - Referer
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Sat, 09 Jul 2022 23:28:52 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "error": {
            "code": 400,
            "message": "Request contains an invalid argument.",
            "errors": [
              {
                "message": "Request contains an invalid argument.",
                "domain": "global",
                "reason": "badRequest"
              }
            ],
            "status": "INVALID_ARGUMENT"
          }
        }
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:28:52 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=durante%20la&start=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:29:52 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:29:52 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=durante%20la&start=11
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:29:52 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:29:52 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=durante%20la&start=21
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:29:53 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:29:53 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=durante%20la&start=31
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:29:53 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:29:53 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=durante%20la&start=41
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:29:54 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:29:54 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=durante%20la&start=51
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:29:55 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:29:55 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=durante%20la&start=61
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:29:55 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:29:55 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=durante%20la&start=71
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:29:56 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:29:56 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=durante%20la&start=81
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:29:56 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:29:56 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=durante%20la&start=91
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sat, 09 Jul 2022 23:29:57 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:29:57 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=008349512099616087257:2_aa5fx5f7e&key=AIzaSyCR6Zm2h8VGtO1I8FXSxWEoVsxmuCInDq0&q=durante%20la&start=101
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 400
      message: Bad Request
    headers:
      Vary:
      - Origin
      - Referer
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Sat, 09 Jul 2022 23:29:57 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "error": {
            "code": 400,
            "message": "Request contains an invalid argument.",
            "errors": [
              {
                "message": "Request contains an invalid argument.",
                "domain": "global",
                "reason": "badRequest"
              }
            ],
            "status": "INVALID_ARGUMENT"
          }
        }
    http_version: null
  recorded_at: Sat, 09 Jul 2022 23:29:57 GMT
recorded_with: VCR 5.1.0
